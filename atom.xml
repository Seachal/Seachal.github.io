<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Seachal的Blogs</title>
  
  <subtitle>记录学习的技能和遇到的问题</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-16T03:07:24.142Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Seachal</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/uncategorized/2019/03/16/Java/Mac%20OS%20%E4%B8%8B%E7%9A%84Java%E7%8E%AF%E5%A2%83-2019-03-06/"/>
    <id>http://yoursite.com/uncategorized/2019/03/16/Java/Mac OS 下的Java环境-2019-03-06/</id>
    <published>2019-03-16T03:07:24.142Z</published>
    <updated>2019-03-16T03:07:24.142Z</updated>
    
    <content type="html"><![CDATA[<p># </p><h2 id="Mac-下-Java的安装位置查看"><a href="#Mac-下-Java的安装位置查看" class="headerlink" title="Mac 下 Java的安装位置查看"></a>Mac 下 Java的安装位置查看</h2><ul><li><ol><li>先去Oracle官网下载地址下载JDK并安装,</li></ol></li></ul><ul><li>2.查找JDK安装路径: <strong><code>$ ls -l /usr/bin/java</code></strong></li></ul><p><img src="media/15518392154843.jpg" alt="如图"></p><pre><code>回到桌面,点击**`前往 -&gt; 前往文件夹`**，拷贝路径**`/System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/java`**进入当前路径,之后会是这样子:</code></pre><p><img src="media/15518398764493.jpg" alt="-w1260"></p><p>实际上这个只是替身路径,编译路径,我们要找的是另一个路径，在此页面,点击<code>资源库</code>（注意次文件夹和系统同级）,下面的路径：</p><p><img src="media/15518397774237.jpg" alt="-w1157"></p><p>点在Home文件夹上,右键-查看简介:</p><p><img src="media/15518400515532.jpg" alt="-w353"></p><p>选择拷贝,打开文本编辑器,粘贴之后就是JDK的正确安装路径了。我的是 <strong><code>/Library/Java/JavaVirtualMachines/jdk1.8.0_141.jdk/Contents/Home</code></strong>这个。</p><h2 id="切换-Mac-下-Java-的版本，How-to-set-or-change-the-default-Java-JDK-version-on-OS-X"><a href="#切换-Mac-下-Java-的版本，How-to-set-or-change-the-default-Java-JDK-version-on-OS-X" class="headerlink" title="切换 Mac 下 Java 的版本，How to set or change the default Java (JDK) version on OS X?"></a>切换 Mac 下 Java 的版本，How to set or change the default Java (JDK) version on OS X?</h2><blockquote><p>依照网上的很多文章，uiautomatorviewer 做为一个sdk中自带的、方便用来定位APP中元素的工具，直接在<code>sdk/tools/bin/uiautomatorviewer</code>文件夹下找到uiautomatorviewer文件，点击打开就可以了。<br>但当我找到并打开之后，并没有出现期望中的图形化界面，命令行中给了我这样一个结果：<br>Error:Could not create the Java Virtual Machine<br>网上找的解决方法是使用Java8就没问题</p></blockquote><p>我本地安装了很多Java 版本所以就在网上找切换Java的方法如下。</p><p>首次运行<code>/usr/libexec/java_home -V</code>将输出如下内容：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="regexp">/usr/</span>libexec/java_home -V</span><br><span class="line">Matching Java Virtual Machines (<span class="number">3</span>):</span><br><span class="line">    <span class="number">10.0</span><span class="number">.2</span>, <span class="string">x86_64:</span><span class="string">"Java SE 10.0.2"</span><span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk<span class="number">-10.0</span><span class="number">.2</span>.jdk<span class="regexp">/Contents/</span>Home</span><br><span class="line">    <span class="number">9.0</span><span class="number">.4</span>, <span class="string">x86_64:</span><span class="string">"Java SE 9.0.4"</span><span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk<span class="number">-9.0</span><span class="number">.4</span>.jdk<span class="regexp">/Contents/</span>Home</span><br><span class="line">    <span class="number">1.8</span><span class="number">.0</span>_141, <span class="string">x86_64:</span><span class="string">"Java SE 8"</span><span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1<span class="number">.8</span><span class="number">.0</span>_141.jdk<span class="regexp">/Contents/</span>Home</span><br></pre></td></tr></table></figure><p><img src="media/15518424011736.jpg" alt="-w800"></p><p>选择您想要的默认版本（<code>9.0.4</code>为了参数），然后：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=`/usr/libexec/java_home -v 9.0.4`</span><br></pre></td></tr></table></figure><p>或者您只能指定主要版本，例如：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=`/usr/libexec/java_home -v 1.8`</span><br></pre></td></tr></table></figure><p>现在，当你run时，<code>java -version</code>你会看到：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">java version <span class="string">"1.8.0_141"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_141-b15)</span><br><span class="line">Java HotSpot(TM) 64-Bit<span class="built_in"> Server </span>VM (build 25.141-b15, mixed mode)</span><br></pre></td></tr></table></figure><p>只需将该<code>export JAVA_HOME…</code>行添加到shell的init文件中即可。</p><p>参考：<a href="https://stackoverflow.com/questions/21964709/how-to-set-or-change-the-default-java-jdk-version-on-os-x" target="_blank" rel="noopener">https://stackoverflow.com/questions/21964709/how-to-set-or-change-the-default-java-jdk-version-on-os-x</a></p><h2 id="更方便的切换"><a href="#更方便的切换" class="headerlink" title="更方便的切换"></a>更方便的切换</h2><p>打开 /Users/用户/.bash_profile文件，添加如下内容</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置 JDK 8</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_8_HOME</span>=`/usr/libexec/java_home -v 1.8`</span><br><span class="line"><span class="comment"># 设置 JDK 9 </span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_9_HOME</span>=`/usr/libexec/java_home -v 9`</span><br><span class="line"><span class="comment"># 设置 JDK 10</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_10_HOME</span>=`/usr/libexec/java_home -v 10`</span><br><span class="line"></span><br><span class="line"><span class="comment">#默认JDK 8</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=<span class="variable">$JAVA_8_HOME</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#alias命令动态切换JDK版本</span></span><br><span class="line">alias <span class="attribute">jdk8</span>=<span class="string">"export JAVA_HOME=<span class="variable">$JAVA_8_HOME</span>"</span></span><br><span class="line"><span class="comment">#alias jdk9="export JAVA_HOME=$JAVA_9_HOME"</span></span><br><span class="line"><span class="comment">#alias jdk8="export JAVA_HOME=$JAVA_10_HOME"</span></span><br></pre></td></tr></table></figure><p>执行source .bash_profile命令，此时再使用<strong>java -version</strong>命令此时显示默认java版本就是1.6了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;# &lt;/p&gt;
&lt;h2 id=&quot;Mac-下-Java的安装位置查看&quot;&gt;&lt;a href=&quot;#Mac-下-Java的安装位置查看&quot; class=&quot;headerlink&quot; title=&quot;Mac 下 Java的安装位置查看&quot;&gt;&lt;/a&gt;Mac 下 Java的安装位置查看&lt;/h2&gt;&lt;ul
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/uncategorized/2019/03/16/Android/Github%20Library/pictureSelector/"/>
    <id>http://yoursite.com/uncategorized/2019/03/16/Android/Github Library/pictureSelector/</id>
    <published>2019-03-16T03:07:24.118Z</published>
    <updated>2019-03-16T03:07:24.118Z</updated>
    
    <content type="html"><![CDATA[<p># </p><h3 id="pictureSelector-选择图片的开源库"><a href="#pictureSelector-选择图片的开源库" class="headerlink" title="pictureSelector 选择图片的开源库"></a>pictureSelector 选择图片的开源库</h3><h4 id="测试从A页面到-选择图片页面（B），点击B上的按钮后B-回到到A的过程中，-B大约需要1S的时间关闭的原因是什么。A-通过-StartActivityforresult-启动，-B关闭后回到A"><a href="#测试从A页面到-选择图片页面（B），点击B上的按钮后B-回到到A的过程中，-B大约需要1S的时间关闭的原因是什么。A-通过-StartActivityforresult-启动，-B关闭后回到A" class="headerlink" title="测试从A页面到 选择图片页面（B），点击B上的按钮后B 回到到A的过程中， B大约需要1S的时间关闭的原因是什么。A 通过 StartActivityforresult 启动， B关闭后回到A."></a>测试从A页面到 选择图片页面（B），点击B上的按钮后B 回到到A的过程中， B大约需要1S的时间关闭的原因是什么。A 通过 StartActivityforresult 启动， B关闭后回到A.</h4><h5 id="A页面使用了-BGA-zxing"><a href="#A页面使用了-BGA-zxing" class="headerlink" title="A页面使用了 BGA-zxing"></a>A页面使用了 BGA-zxing</h5><ul><li>B</li></ul><p>ok1     1527488490790</p><p>ok2     1527488490790</p><p><strong>ok3     1527488490811</strong>    B<br>activity关闭 会返回到A Activity。</p><ul><li>A  </li></ul><p>onCreate1527488485885</p><p>onStart  1527488485887</p><p>onResume 1527488486233</p><p>onStop1527488488353</p><p><strong>onStart  1527488490846</strong>  B关闭返回到A  可以看到B 关闭回到A耗时非常短（ok2 和本onstart的差值 ），其实</p><p><strong>onResume 1527488491218</strong></p><p>onStop   1527488494359</p><p>onDestroy1527488494359</p><h5 id="A2是一个简单页面"><a href="#A2是一个简单页面" class="headerlink" title="A2是一个简单页面"></a>A2是一个简单页面</h5><ul><li>B Activity</li></ul><p>ok1 1527489826242</p><p>ok2 1527489826242</p><p><strong>ok3 1527489826278</strong></p><ul><li><p>A2 Activity</p><p>onCreate  1527489817153<br>  onStart1527489817156<br> onResume1527489817157<br>   onStop1527489820219</p><p> <strong>onStart 1527489826319</strong></p><p><strong>onResume 1527489826319</strong></p><pre><code>onStop1527489886202</code></pre></li></ul><h4 id="得出结论，-相较于A2，A页面使用了Zxing，zxing比较耗时。所以，耗时发生在-A页面再次-onResume，"><a href="#得出结论，-相较于A2，A页面使用了Zxing，zxing比较耗时。所以，耗时发生在-A页面再次-onResume，" class="headerlink" title="得出结论， 相较于A2，A页面使用了Zxing，zxing比较耗时。所以，耗时发生在 A页面再次 onResume，"></a>得出结论， 相较于A2，A页面使用了Zxing，zxing比较耗时。所以，耗时发生在 A页面再次 onResume，</h4><ul><li>BGAQRCode 中，onStart到onResume速度特别快。<br>BGAQRCode使用的事自己图片选择。<br>onCreate1527492375031<br>onStart1527492375434<br>onResume1527492375434</li></ul><p>onStop   1527492380028<br>onStart  1527492381807<br>onResume 1527492381807</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;# &lt;/p&gt;
&lt;h3 id=&quot;pictureSelector-选择图片的开源库&quot;&gt;&lt;a href=&quot;#pictureSelector-选择图片的开源库&quot; class=&quot;headerlink&quot; title=&quot;pictureSelector 选择图片的开源库&quot;&gt;&lt;/a&gt;pict
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/uncategorized/2019/03/16/Android/Github%20Library/%E5%9B%BE%E8%A1%A8%E5%BC%80%E6%BA%90%E5%BA%93MPAndroidChart/"/>
    <id>http://yoursite.com/uncategorized/2019/03/16/Android/Github Library/图表开源库MPAndroidChart/</id>
    <published>2019-03-16T03:07:24.118Z</published>
    <updated>2019-03-16T03:07:24.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图表开源库MPAndroidChart的使用"><a href="#图表开源库MPAndroidChart的使用" class="headerlink" title="图表开源库MPAndroidChart的使用"></a>图表开源库MPAndroidChart的使用</h1><p>  使用版本3.0.3</p><h2 id="chart-的一些使用规则"><a href="#chart-的一些使用规则" class="headerlink" title="chart 的一些使用规则"></a>chart 的一些使用规则</h2><p>  一个 linechart 需要两个ArrayList，其他chart 也类似。</p><p>  ArrayList<x> xList,<br>  ArrayList<y> yList;<br>  xList he  yList的size相等。<br>  （i,x）与 （i,y）基于i相交于一点才会绘制在 view中。</y></x></p><h2 id="1-lineChart"><a href="#1-lineChart" class="headerlink" title="1.lineChart"></a>1.lineChart</h2><ul><li>1.1</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        关于图表的描述</span></span><br><span class="line">        <span class="keyword">int</span> textColor = ContextCompat.getColor(mActivity, R.color.stage_text);</span><br><span class="line">        <span class="keyword">Description</span> <span class="keyword">description</span> = <span class="keyword">new</span> <span class="keyword">Description</span>();</span><br><span class="line">        <span class="keyword">description</span>.setText(<span class="string">"周"</span>);</span><br><span class="line">        <span class="keyword">description</span>.setTextColor(textColor);</span><br><span class="line">        <span class="keyword">description</span>.setTextSize(<span class="number">12</span>);</span><br><span class="line">        <span class="keyword">description</span>.setXOffset(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">description</span>.setYOffset(-<span class="number">15</span>);<span class="comment">// 相对于Y位置偏移量</span></span><br><span class="line">        mChart.setDescription(<span class="keyword">description</span>); <span class="comment">//图表默认右下方的描述，</span></span><br></pre></td></tr></table></figure><p>  <img src="media/15268910065668.jpg" alt=""></p><ul><li>1.2 </li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span>图例设置    图例（声明颜色line， 颜色bar代表什么数据，  如红色代表订购率 ）</span><br><span class="line">Legend legend = mChart.getLegend<span class="params">()</span>;</span><br><span class="line">legend.<span class="keyword">set</span>HorizontalAlignment<span class="params">(Legend.LegendHorizontalAlignment.RIGHT)</span>;<span class="string">//</span>设置图例水平对齐,   居右侧</span><br><span class="line">legend.<span class="keyword">set</span>VerticalAlignment<span class="params">(Legend.LegendVerticalAlignment.TOP)</span>;<span class="string">//</span> 居上侧</span><br><span class="line">legend.<span class="keyword">set</span>Orientation<span class="params">(Legend.LegendOrientation.HORIZONTAL)</span>;<span class="string">//</span> 水平</span><br><span class="line">legend.<span class="keyword">set</span>DrawInside<span class="params">(true)</span>;  <span class="string">//</span></span><br><span class="line">legend.<span class="keyword">set</span>Direction<span class="params">(Legend.LegendDirection.LEFT_TO_RIGHT)</span>;<span class="string">//</span> 颜色在左  文字在右</span><br><span class="line">legend.<span class="keyword">set</span>Form<span class="params">(Legend.LegendForm.LINE)</span>;<span class="string">////</span>设置图例形状， SQUARE<span class="params">(方格)</span> CIRCLE（圆形） LINE（线性）</span><br><span class="line">legend.<span class="keyword">set</span>TextSize<span class="params">(12f)</span>;</span><br><span class="line">legend.<span class="keyword">set</span>Enabled<span class="params">(true)</span>;</span><br></pre></td></tr></table></figure><p><img src="media/15268908222735.jpg" alt=""></p><ul><li>1.3  y轴</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//y轴设置  左侧</span></span><br><span class="line">      YAxis leftAxis = mChart.getAxisLeft();</span><br><span class="line">      leftAxis.setPosition(YAxis.YAxisLabelPosition.OUTSIDE_CHART);<span class="comment">//设置y-labels显示的位置</span></span><br><span class="line">      leftAxis.setDrawGridLines(<span class="literal">true</span>);<span class="comment">//绘制y网格线</span></span><br><span class="line">      leftAxis.enableGridDashedLine(<span class="number">4f</span>, <span class="number">2f</span>, <span class="number">0f</span>);<span class="comment">//启用网格虚线</span></span><br><span class="line">      leftAxis.setTextColor(barColor);<span class="comment">//label字体颜色</span></span><br><span class="line">      leftAxis.setTextSize(<span class="number">11</span>);<span class="comment">//label字体大小</span></span><br><span class="line">      leftAxis.setLabelCount(Y_LABEL_COUNT, <span class="literal">false</span>);<span class="comment">//y label显示的数量</span></span><br><span class="line">      leftAxis.setDrawLabels(<span class="literal">true</span>);<span class="comment">//折线上显示值，则不显示坐标轴上的值</span></span><br><span class="line">      leftAxis.setAxisMinimum(<span class="number">0f</span>);</span><br><span class="line">      IAxisValueFormatter leftFormaterr = <span class="built_in">new</span> MyLeftYAxisValueFormatter();</span><br><span class="line">      leftAxis.setValueFormatter(leftFormaterr);</span><br></pre></td></tr></table></figure><ul><li><p>IAxisValueFormatter 格式话坐标的显示方式<br>例如给y轴的所有刻度值后面都加上 ”条“、”%“<br><img src="media/15268907184995.jpg" alt=""></p></li><li><p>1.4  绘制line或者bar等等</p></li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;ILineDataSet&gt; dataSets = new ArrayList&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; entriesList.size(); ++i) &#123;</span><br><span class="line">          LineDataSet <span class="keyword">set</span> = new <span class="comment">LineDataSet(entriesList.get(i), titles[i])</span>;</span><br><span class="line">          <span class="keyword">if</span> (lineColors != null) &#123;</span><br><span class="line">              <span class="keyword">set</span>.setColor(lineColors[i]);</span><br><span class="line">              <span class="keyword">set</span>.setCircleColor(lineColors[i]);</span><br><span class="line">              <span class="keyword">set</span>.setCircleColorHole(Color.WHITE);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">set</span>.setColor(LINE_COLORS[i <span class="comment">% 3])</span>;</span><br><span class="line">              <span class="keyword">set</span>.setCircleColor(LINE_COLORS[i <span class="comment">% 3])</span>;</span><br><span class="line">              <span class="keyword">set</span>.setCircleColorHole(Color.WHITE);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">set</span>.setCircleRadius(2.0f);<span class="comment">//折线上圆点的大小。</span></span><br><span class="line">          <span class="keyword">set</span>.setMode(LineDataSet.Mode.HORIZONTAL_BEZIER);<span class="comment">//设置折线图样式  圆滑曲线  平滑曲线 或者 折线</span></span><br><span class="line">          <span class="keyword">set</span>.setLineWidth(1.5f);<span class="comment">//线的宽度（线的粗度）</span></span><br><span class="line">          <span class="keyword">set</span>.setDrawCircles(true);<span class="comment">//禁止显示数据坐标圆点</span></span><br><span class="line">          <span class="comment">//设置显示/不显示 在坐标点上方显示坐标值。</span></span><br><span class="line">          <span class="keyword">set</span>.setDrawValues(false);  <span class="comment">//Enables / disables drawing values (value-text) for all DataSets this data object contains.</span></span><br><span class="line">          <span class="keyword">set</span>.setAxisDependency(YAxis.AxisDependency.RIGHT);<span class="comment">// 数值属于右侧Y轴</span></span><br><span class="line">          setRightAxisMaximum(deliveryLevelTrend);</span><br><span class="line">          dataSets.add(<span class="keyword">set</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p><img src="media/15268920945142.jpg" alt=""></p><h2 id="2-barChart"><a href="#2-barChart" class="headerlink" title="2.barChart"></a>2.barChart</h2><h2 id="3-CombinedChart"><a href="#3-CombinedChart" class="headerlink" title="3.CombinedChart"></a>3.CombinedChart</h2><h3 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">CombinedData</span> <span class="class"><span class="keyword">data</span> = new <span class="type">CombinedData</span>();</span></span><br><span class="line"></span><br><span class="line">   <span class="class"><span class="keyword">data</span>.setData(<span class="title">generateLineData</span>());</span></span><br><span class="line">   <span class="class"><span class="keyword">data</span>.setData(<span class="title">generateBarData</span>());</span></span><br><span class="line">   <span class="class"><span class="keyword">data</span>.setData(<span class="title">generateBubbleData</span>());</span></span><br><span class="line">   <span class="class"><span class="keyword">data</span>.setData(<span class="title">generateScatterData</span>());</span></span><br><span class="line">   <span class="class"><span class="keyword">data</span>.setData(<span class="title">generateCandleData</span>());</span></span><br><span class="line">   <span class="class"><span class="keyword">data</span>.setValueTypeface(<span class="title">mTfLight</span>);</span></span><br><span class="line"></span><br><span class="line">   xAxis.setAxisMaximum(<span class="class"><span class="keyword">data</span>.getXMax() + 0.25f);</span></span><br><span class="line"></span><br><span class="line">   mChart.setData(<span class="class"><span class="keyword">data</span>);</span></span><br><span class="line">   mChart.invalidate();</span><br></pre></td></tr></table></figure><p>所有数据都必须set到一个 CombinedData中去，不然是会报错的。<br>也很好立即， CombinedChart就是把所有的图表整合为一个。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;图表开源库MPAndroidChart的使用&quot;&gt;&lt;a href=&quot;#图表开源库MPAndroidChart的使用&quot; class=&quot;headerlink&quot; title=&quot;图表开源库MPAndroidChart的使用&quot;&gt;&lt;/a&gt;图表开源库MPAndroidChart的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/uncategorized/2019/03/16/Android/tools/Android%20UI%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7uiautomatorviewer%20%202019-03-06/"/>
    <id>http://yoursite.com/uncategorized/2019/03/16/Android/tools/Android UI分析工具uiautomatorviewer  2019-03-06/</id>
    <published>2019-03-16T03:07:24.118Z</published>
    <updated>2019-03-16T03:07:24.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-UI分析工具uiautomatorviewer"><a href="#Android-UI分析工具uiautomatorviewer" class="headerlink" title="Android UI分析工具uiautomatorviewer"></a>Android UI分析工具uiautomatorviewer</h1><h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><p>以前是用HierarchyViewer查看界面的布局层次的，其实UiAutomatorViewer用起来更方便更直观，个人更偏向后者。</p><p>UiAutomatorViewer也是Android sdk自带的工具，在如下路径（我的是AS 3.0，不同版本似乎有差别）：<br><code>\sdk\tools\bin\uiautomatorviewer</code><br>双击就可运行。</p><p>将手机连接到设备上，在手机上启动一个需要测试的目标页面，然后点击uiautomatorviewer左上角的第二个按钮（Device Screenshot(uiautomator dump)），便可以把当前页面截下来了<br><img src="media/15518458936766.jpg" alt="-w1249"></p><p><code>uiautomatorviewer</code>的界面分成了3个部分：</p><ul><li><p>左边部分：显示当前屏幕的截图。在这个部分，我们可以对这个页面上的各个控件做一些选中的操作。</p></li><li><p>右上角部分：显示当前页面的View层级。</p></li><li><p>右下角部分：显示当前选中控件的各个属性。</p><ul><li>resource-id便是这个控件的id</li></ul></li></ul><p><img src="media/15518467622466.jpg" alt="-w1143"></p><h2 id="豆瓣"><a href="#豆瓣" class="headerlink" title="豆瓣"></a>豆瓣</h2><h3 id="电影底部换上去的-panel分析"><a href="#电影底部换上去的-panel分析" class="headerlink" title="电影底部换上去的 panel分析"></a>电影底部换上去的 panel分析</h3><p><img src="media/15518469670166.jpg" alt="-w1130"></p><p>在手机上操作吧得底部panel划上去后，再次点击uiautomatorviewer工具界面的左上角第二个按钮就，就会更新次工具界面的数据。<br><img src="media/15518473491797.jpg" alt="-w1115"></p><h3 id="小组的-panel"><a href="#小组的-panel" class="headerlink" title="小组的 panel"></a>小组的 panel</h3><p><img src="media/15518489553264.jpg" alt="-w1140"><br>划上去<br><img src="media/15518477286639.jpg" alt="-w1104"></p><p><img src="media/15518490168345.jpg" alt="-w1145"><br>可以看出滑上来的panel挡住之前页面显示的内容。</p><p>参考：<a href="https://blog.csdn.net/l403040463/article/details/79235670" target="_blank" rel="noopener">https://blog.csdn.net/l403040463/article/details/79235670</a><br><a href="https://segmentfault.com/a/1190000004367222" target="_blank" rel="noopener">https://segmentfault.com/a/1190000004367222</a><br><a href="https://www.jianshu.com/p/2d7a63455c83" target="_blank" rel="noopener">https://www.jianshu.com/p/2d7a63455c83</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android-UI分析工具uiautomatorviewer&quot;&gt;&lt;a href=&quot;#Android-UI分析工具uiautomatorviewer&quot; class=&quot;headerlink&quot; title=&quot;Android UI分析工具uiautomatorviewe
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/uncategorized/2019/03/16/Android/Github%20Library/EasyPermission%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-2019-02-28/"/>
    <id>http://yoursite.com/uncategorized/2019/03/16/Android/Github Library/EasyPermission 源码分析-2019-02-28/</id>
    <published>2019-03-16T03:07:24.106Z</published>
    <updated>2019-03-16T03:07:24.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EasyPermission-源码分析"><a href="#EasyPermission-源码分析" class="headerlink" title="EasyPermission 源码分析"></a>EasyPermission 源码分析</h1><p>使用EasyPermission时没搞懂怎样从 <code>EasyPermissions</code>中 build出一个 <code>rational dialog</code>的，所以简单分析了一下源码，</p><p>分析版本 是<code>2.0.1</code></p><h2 id="Rationale-Dialog-什么条件下显示"><a href="#Rationale-Dialog-什么条件下显示" class="headerlink" title="Rationale Dialog 什么条件下显示"></a>Rationale Dialog 什么条件下显示</h2><h3 id="反向"><a href="#反向" class="headerlink" title="反向"></a>反向</h3><p>使用 <img src="media/15513234535380.jpg" alt="-w387"></p><p>1.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRationaleAccepted</span><span class="params">(<span class="keyword">int</span> requestCode)</span> </span>&#123;</span><br><span class="line">    Log.d(TAG, <span class="string">"onRationaleAccepted:"</span> + requestCode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRationaleDenied</span><span class="params">(<span class="keyword">int</span> requestCode)</span> </span>&#123;</span><br><span class="line">    Log.d(TAG, <span class="string">"onRationaleDenied:"</span> + requestCode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这两行代码，验证是 Rationale dialog的回调。<br>2.找到onRationaleAccepted被调用的地方<br><img src="media/15513216147308.jpg" alt="-w508"><br>3.找到调用 持有<code>RationaleDialogClickListener</code>对象的类 <code>RationaleDialogFragment</code><br><img src="media/15513216655198.jpg" alt="-w724"><br>4.找到持有 <code>RationaleDialogFragment</code>对象的类<code>ActivityPermissionHelper</code><br><img src="media/15513217335424.jpg" alt="-w599"><br>5.找到PermissionHelper<br><img src="media/15513218588209.jpg" alt="-w448"><br>6.最后就找到了<code>EasyPermissions</code><br><img src="media/15513221021090.jpg" alt="-w565"></p><h3 id="正向"><a href="#正向" class="headerlink" title="正向"></a>正向</h3><p>因为早上状态不佳，有些代码没看太清楚，导致正向推断没有成功，反向推断后，再从正向去看，原来是一些小细节被自己忽略了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Request permissions from a Support Fragment with standard OK/Cancel buttons.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #requestPermissions(Activity, String, int, String...)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">requestPermissions</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">           @NonNull Fragment host, @NonNull String rationale,</span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">int</span> requestCode, @Size(min = <span class="number">1</span>)</span> @NonNull String... perms) </span>&#123;</span><br><span class="line">       requestPermissions(</span><br><span class="line">               <span class="keyword">new</span> PermissionRequest.Builder(host, requestCode, perms)</span><br><span class="line">                       .setRationale(rationale)</span><br><span class="line">                       .build());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Request a set of permissions.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> request the permission request</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> PermissionRequest</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">requestPermissions</span><span class="params">(PermissionRequest request)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Check for permissions before dispatching the request</span></span><br><span class="line">       <span class="keyword">if</span> (hasPermissions(request.getHelper().getContext(), request.getPerms())) &#123;</span><br><span class="line">           notifyAlreadyHasPermissions(</span><br><span class="line">                   request.getHelper().getHost(), request.getRequestCode(), request.getPerms());</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Request permissions</span></span><br><span class="line">       request.getHelper().requestPermissions(</span><br><span class="line">               request.getRationale(),</span><br><span class="line">               request.getPositiveButtonText(),</span><br><span class="line">               request.getNegativeButtonText(),</span><br><span class="line">               request.getTheme(),</span><br><span class="line">               request.getRequestCode(),</span><br><span class="line">               request.getPerms());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>有多个参数的<code>requestPermissions（）</code>调用了只有一个参数的<code>requestPermissions（）</code>方法，</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">getHelper</span><span class="params">()</span></span>.requestPermissions（）</span><br></pre></td></tr></table></figure><p>方法把dialog相关的参数传递给PermissionHelper 。然后按照 # 反向 中的6-5-4-3-2-1就看出调用关系了。</p><p>Dialog<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RationaleDialogFragment <span class="title">newInstance</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @NonNull String positiveButton,</span></span></span><br><span class="line"><span class="function"><span class="params">            @NonNull String negativeButton,</span></span></span><br><span class="line"><span class="function"><span class="params">            @NonNull String rationaleMsg,</span></span></span><br><span class="line"><span class="function"><span class="params">            @StyleRes <span class="keyword">int</span> theme,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> requestCode,</span></span></span><br><span class="line"><span class="function"><span class="params">            @NonNull String[] permissions)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create new Fragment</span></span><br><span class="line">        RationaleDialogFragment dialogFragment = <span class="keyword">new</span> RationaleDialogFragment();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize configuration as arguments</span></span><br><span class="line">        RationaleDialogConfig config = <span class="keyword">new</span> RationaleDialogConfig(</span><br><span class="line">                positiveButton, negativeButton, rationaleMsg, theme, requestCode, permissions);</span><br><span class="line">        dialogFragment.setArguments(config.toBundle());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dialogFragment;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="AppSettingsDialog-如何打开设置页的。"><a href="#AppSettingsDialog-如何打开设置页的。" class="headerlink" title="AppSettingsDialog 如何打开设置页的。"></a>AppSettingsDialog 如何打开<code>设置</code>页的。</h2><p>1.AppSettingsDialog</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Show the dialog. &#123;<span class="doctag">@link</span> #show()&#125; is a wrapper to ensure backwards compatibility</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">AlertDialog <span class="title">showDialog</span><span class="params">(DialogInterface.OnClickListener positiveListener,</span></span></span><br><span class="line"><span class="function"><span class="params">                          DialogInterface.OnClickListener negativeListener)</span> </span>&#123;</span><br><span class="line">       AlertDialog.Builder builder;</span><br><span class="line">       <span class="keyword">if</span> (mThemeResId != -<span class="number">1</span>) &#123;</span><br><span class="line">           builder = <span class="keyword">new</span> AlertDialog.Builder(mContext, mThemeResId);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           builder = <span class="keyword">new</span> AlertDialog.Builder(mContext);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> builder</span><br><span class="line">               .setCancelable(<span class="keyword">false</span>)</span><br><span class="line">               .setTitle(mTitle)</span><br><span class="line">               .setMessage(mRationale)</span><br><span class="line">               .setPositiveButton(mPositiveButtonText, positiveListener)</span><br><span class="line">               .setNegativeButton(mNegativeButtonText, negativeListener)</span><br><span class="line">               .show();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>2.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;EasyPermission-源码分析&quot;&gt;&lt;a href=&quot;#EasyPermission-源码分析&quot; class=&quot;headerlink&quot; title=&quot;EasyPermission 源码分析&quot;&gt;&lt;/a&gt;EasyPermission 源码分析&lt;/h1&gt;&lt;p&gt;使用
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/uncategorized/2019/03/16/Android/Github%20Library/2018-05-28/"/>
    <id>http://yoursite.com/uncategorized/2019/03/16/Android/Github Library/2018-05-28/</id>
    <published>2019-03-16T03:07:24.105Z</published>
    <updated>2019-03-16T03:07:24.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android开发在onResume中执行耗时操作导致从其他界面返回特别慢"><a href="#Android开发在onResume中执行耗时操作导致从其他界面返回特别慢" class="headerlink" title="Android开发在onResume中执行耗时操作导致从其他界面返回特别慢"></a>Android开发在onResume中执行耗时操作导致从其他界面返回特别慢</h1><blockquote><p>以pictureSelector 为基础，做的验证试验。</p></blockquote><p>今天改别人的一个bug时遇见一个问题，发现某个界面点击返回以后特别慢，得等一会儿才能返回到上一个界面。</p><p>当时第一反应可能是在点击返回的时候或者是在Activity的onDestroy里面做了很多耗时的操作导致点击返回的时候出现特别慢的问题，但是仔细查看了一下代码发现在返回按钮的监听或者是设备返回键的监听都没有做什么操作，onDestroy里同样没做什么操作，这就奇怪了问题到底出在哪里呢？</p><p>经过一番查找调试分析，觉得问题可能不是出在当前界面，将视线转到要返回的上一个界面，发现重写了onResume方法，可能是这个方法执行了耗时的操作导致的，打印了一下这个方法的耗时时间发现耗时也不是很高啊还不到10ms，难道问题的关键不是在这里？</p><p>为了验证我的想法我自己写了个demo，在AActivity的onResume里执行Thread.sleep(10000)睡眠10秒，跳转到BActivity然后点击返回。果然，当点击返回的时候会B会停5秒左右关闭，然后黑屏5秒左右才会回到AActivity。代码如下</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">          Log.i(TAG, <span class="string">"Resume1000"</span>+System.currentTimeMillis());</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">super</span>.onResume();</span><br><span class="line">      Log.i(TAG, <span class="string">"onResume"</span>+System.currentTimeMillis());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>通过demo说明问题很有可能是出在onResume里面，再仔细看了看onResume里的代码，发现在onResume里执行了handler.sendMessage发送消息，会不会是在handler里面执行的代码耗时里，调试一下发现果然是这里面的代码出现了耗时的操作。</p><p>找到问题所在了就好办了，将这段耗时的操作提取到线程里执行，执行完后再使用handler通知UI刷新界面，ok重新运行程序，测试一下，点击返回很流畅，搞定。</p><p>记录一下免得自己以后也在开发中犯同样的错误。</p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>页面优化  页面速度</p><h3 id="写这个例子是，遇到的自己掌握不牢固的问题。"><a href="#写这个例子是，遇到的自己掌握不牢固的问题。" class="headerlink" title="写这个例子是，遇到的自己掌握不牢固的问题。"></a>写这个例子是，遇到的自己掌握不牢固的问题。</h3><p>  1.Thread </p><pre><code>1.1 错误的演示代码：</code></pre><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                 Thread.sleep(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">             &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                 <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                 e.printStackTrace();</span><br><span class="line">             &#125;</span><br><span class="line">             resume();</span><br><span class="line">             Log.i(TAG, <span class="string">"Resume3000"</span>+System.currentTimeMillis());</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;).start();</span><br><span class="line">     Log.i(TAG, <span class="string">"onResume"</span>+System.currentTimeMillis());</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="function"><span class="keyword">void</span>  <span class="title">resume</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">super</span>.onResume();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="media/15275177563439.jpg" alt=""></p><p>   1.2<br>   代码</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Log.i(TAG, <span class="string">"Resume3000"</span>+System.currentTimeMillis());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">    <span class="keyword">super</span>.onResume();</span><br><span class="line">    Log.i(TAG, <span class="string">"onResume"</span>+System.currentTimeMillis());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I/SimpleViewActivity: onResume15<span class="number">27517858625</span></span><br><span class="line">I/SimpleViewActivity: Resume300015<span class="number">27517861619</span></span><br></pre></td></tr></table></figure><p>结论：<br>  new Thread 创建了新的线程， （是异步的了？），所以，线程内的代码执行的比线程代码下面的代码晚。<br>  <a href="http://itindex.net/detail/54784-android-%E7%BA%BF%E7%A8%8B-%E5%A4%A7%E5%9D%91" target="_blank" rel="noopener">http://itindex.net/detail/54784-android-%E7%BA%BF%E7%A8%8B-%E5%A4%A7%E5%9D%91</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android开发在onResume中执行耗时操作导致从其他界面返回特别慢&quot;&gt;&lt;a href=&quot;#Android开发在onResume中执行耗时操作导致从其他界面返回特别慢&quot; class=&quot;headerlink&quot; title=&quot;Android开发在onResume
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/uncategorized/2019/03/16/Android/Github%20Library/BGAQRCode/"/>
    <id>http://yoursite.com/uncategorized/2019/03/16/Android/Github Library/BGAQRCode/</id>
    <published>2019-03-16T03:07:24.105Z</published>
    <updated>2019-03-16T03:07:24.105Z</updated>
    
    <content type="html"><![CDATA[<p>#<br><img src="media/15281008537668.jpg" alt=""></p><ol><li>QRCodeView 是抽象类， 这样ZxingView，ZbarView就可以更好的根据自己的特性进行拓展，</li><li>ScanBoxView  是真正的扫描框<br><img src="media/15281010093593.jpg" alt=""></li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;cn.bingoogolapple.qrcode.zxing.ZXingView</span><br><span class="line">        android:<span class="attribute">id</span>=<span class="string">"@+id/zxingview"</span></span><br><span class="line">        <span class="attribute">style</span>=<span class="string">"@style/MatchMatch"</span></span><br><span class="line">        app:<span class="attribute">qrcv_animTime</span>=<span class="string">"1000"</span></span><br><span class="line">        app:<span class="attribute">qrcv_barCodeTipText</span>=<span class="string">"将条码放入框内，即可自动扫描"</span></span><br><span class="line">        app:<span class="attribute">qrcv_barcodeRectHeight</span>=<span class="string">"120dp"</span></span><br><span class="line">        app:<span class="attribute">qrcv_borderColor</span>=<span class="string">"@android:color/white"</span></span><br><span class="line">        app:<span class="attribute">qrcv_borderSize</span>=<span class="string">"1dp"</span></span><br><span class="line">        app:<span class="attribute">qrcv_cornerColor</span>=<span class="string">"@color/colorPrimaryDark"</span></span><br><span class="line">        app:<span class="attribute">qrcv_cornerLength</span>=<span class="string">"20dp"</span></span><br><span class="line">        app:<span class="attribute">qrcv_cornerSize</span>=<span class="string">"3dp"</span></span><br><span class="line">        app:<span class="attribute">qrcv_customScanLineDrawable</span>=<span class="string">"@drawable/scan_icon_scanline"</span></span><br><span class="line">        app:<span class="attribute">qrcv_isBarcode</span>=<span class="string">"false"</span></span><br><span class="line">        app:<span class="attribute">qrcv_isCenterVertical</span>=<span class="string">"false"</span></span><br><span class="line">        app:<span class="attribute">qrcv_isOnlyDecodeScanBoxArea</span>=<span class="string">"false"</span></span><br><span class="line">        app:<span class="attribute">qrcv_isScanLineReverse</span>=<span class="string">"true"</span></span><br><span class="line">        app:<span class="attribute">qrcv_isShowDefaultGridScanLineDrawable</span>=<span class="string">"false"</span></span><br><span class="line">        app:<span class="attribute">qrcv_isShowDefaultScanLineDrawable</span>=<span class="string">"true"</span></span><br><span class="line">        app:<span class="attribute">qrcv_isShowTipBackground</span>=<span class="string">"true"</span></span><br><span class="line">        app:<span class="attribute">qrcv_isShowTipTextAsSingleLine</span>=<span class="string">"false"</span></span><br><span class="line">        app:<span class="attribute">qrcv_isTipTextBelowRect</span>=<span class="string">"false"</span></span><br><span class="line">        app:<span class="attribute">qrcv_maskColor</span>=<span class="string">"#33FFFFFF"</span></span><br><span class="line">        app:<span class="attribute">qrcv_qrCodeTipText</span>=<span class="string">"将二维码/条码放入框内，即可自动扫描"</span></span><br><span class="line">        app:<span class="attribute">qrcv_rectWidth</span>=<span class="string">"200dp"</span></span><br><span class="line">        app:<span class="attribute">qrcv_scanLineColor</span>=<span class="string">"@color/colorPrimaryDark"</span></span><br><span class="line">        app:<span class="attribute">qrcv_scanLineMargin</span>=<span class="string">"0dp"</span></span><br><span class="line">        app:<span class="attribute">qrcv_scanLineSize</span>=<span class="string">"0.5dp"</span></span><br><span class="line">        app:<span class="attribute">qrcv_tipTextColor</span>=<span class="string">"@android:color/white"</span></span><br><span class="line">        app:<span class="attribute">qrcv_tipTextSize</span>=<span class="string">"12sp"</span></span><br><span class="line">        app:<span class="attribute">qrcv_toolbarHeight</span>=<span class="string">"56dp"</span></span><br><span class="line">        app:<span class="attribute">qrcv_topOffset</span>=<span class="string">"20dp"</span>/&gt;</span><br></pre></td></tr></table></figure><p>在xml中的很多参数是借ZXingView（QRCodeView）传给了ScanBoxView。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#&lt;br&gt;&lt;img src=&quot;media/15281008537668.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;QRCodeView 是抽象类， 这样ZxingView，ZbarView就可以更好的根据自己的特性进行拓展，&lt;/li&gt;
&lt;li&gt;ScanBoxVie
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/uncategorized/2019/03/04/Android/addTextChangedListener%E7%9A%84%E4%B8%89%E4%B8%AA%E6%96%B9%E6%B3%952019-02-13/"/>
    <id>http://yoursite.com/uncategorized/2019/03/04/Android/addTextChangedListener的三个方法2019-02-13/</id>
    <published>2019-03-04T13:38:08.625Z</published>
    <updated>2019-03-04T13:38:08.625Z</updated>
    
    <content type="html"><![CDATA[<h1 id="addTextChangedListener的三个方法"><a href="#addTextChangedListener的三个方法" class="headerlink" title="addTextChangedListener的三个方法"></a>addTextChangedListener的三个方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mEtPassword.addTextChangedListener(<span class="keyword">new</span> TextWatcher() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> count, <span class="keyword">int</span> after)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//s:变化前的所有字符； start:字符开始的位置； count:；after:变化后的字节数</span></span><br><span class="line">                Log.i(<span class="string">"Seachal:"</span>, <span class="string">"beforeTextChanged:s="</span> + s + <span class="string">";"</span> + <span class="string">"start:"</span> + start + <span class="string">";"</span> + <span class="string">"count:"</span> + count + <span class="string">";"</span> + <span class="string">"after:"</span> + after);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> before, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//S：变化后的所有字符；start：字符起始的位置；before: ；count:变化后的字节数</span></span><br><span class="line">                Log.i(<span class="string">"Seachal:"</span>, <span class="string">"onTextChanged:s="</span> + s + <span class="string">";"</span> + <span class="string">"start:"</span> + start + <span class="string">";"</span> + <span class="string">"before:"</span> + before + <span class="string">";"</span> + <span class="string">"count:"</span> + count);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTextChanged</span><span class="params">(Editable s)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//s:变化后的所有字符</span></span><br><span class="line">                Log.i(<span class="string">"Seachal:"</span>, <span class="string">"afterTextChanged:s="</span> + s + <span class="string">";=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span>);</span><br></pre></td></tr></table></figure><p>1.从未输入任何字符开始输入 <code>test</code> log的变化</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">I/<span class="string">Seachal:</span>: <span class="string">beforeTextChanged:</span>s=;<span class="string">start:</span><span class="number">0</span>;<span class="string">count:</span><span class="number">0</span>;<span class="string">after:</span><span class="number">1</span></span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">onTextChanged:</span>s=t;<span class="string">start:</span><span class="number">0</span>;<span class="string">before:</span><span class="number">0</span>;<span class="string">count:</span><span class="number">1</span></span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">afterTextChanged:</span>s=t;=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">beforeTextChanged:</span>s=t;<span class="string">start:</span><span class="number">1</span>;<span class="string">count:</span><span class="number">0</span>;<span class="string">after:</span><span class="number">1</span></span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">onTextChanged:</span>s=te;<span class="string">start:</span><span class="number">1</span>;<span class="string">before:</span><span class="number">0</span>;<span class="string">count:</span><span class="number">1</span></span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">afterTextChanged:</span>s=te;=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">beforeTextChanged:</span>s=te;<span class="string">start:</span><span class="number">2</span>;<span class="string">count:</span><span class="number">0</span>;<span class="string">after:</span><span class="number">1</span></span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">onTextChanged:</span>s=tes;<span class="string">start:</span><span class="number">2</span>;<span class="string">before:</span><span class="number">0</span>;<span class="string">count:</span><span class="number">1</span></span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">afterTextChanged:</span>s=tes;=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">beforeTextChanged:</span>s=tes;<span class="string">start:</span><span class="number">3</span>;<span class="string">count:</span><span class="number">0</span>;<span class="string">after:</span><span class="number">1</span></span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">onTextChanged:</span>s=test;<span class="string">start:</span><span class="number">3</span>;<span class="string">before:</span><span class="number">0</span>;<span class="string">count:</span><span class="number">1</span></span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">afterTextChanged:</span>s=test;=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>2.在 <code>test</code> 基础上增加字符<code>23</code>看变化</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">I/<span class="string">Seachal:</span>: <span class="string">beforeTextChanged:</span>s=test;<span class="string">start:</span><span class="number">4</span>;<span class="string">count:</span><span class="number">0</span>;<span class="string">after:</span><span class="number">1</span></span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">onTextChanged:</span>s=test2;<span class="string">start:</span><span class="number">4</span>;<span class="string">before:</span><span class="number">0</span>;<span class="string">count:</span><span class="number">1</span></span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">afterTextChanged:</span>s=test2;=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">beforeTextChanged:</span>s=test2;<span class="string">start:</span><span class="number">5</span>;<span class="string">count:</span><span class="number">0</span>;<span class="string">after:</span><span class="number">1</span></span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">onTextChanged:</span>s=test23;<span class="string">start:</span><span class="number">5</span>;<span class="string">before:</span><span class="number">0</span>;<span class="string">count:</span><span class="number">1</span></span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">afterTextChanged:</span>s=test23;=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>3.在<code>test23</code>基础上删除<code>23</code>看变化</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">beforeTextChanged:</span>s=test23;<span class="string">start:</span><span class="number">5</span>;<span class="string">count:</span><span class="number">1</span>;<span class="string">after:</span><span class="number">0</span></span><br><span class="line"><span class="string">onTextChanged:</span>s=test2;<span class="string">start:</span><span class="number">5</span>;<span class="string">before:</span><span class="number">1</span>;<span class="string">count:</span><span class="number">0</span></span><br><span class="line"><span class="string">afterTextChanged:</span>s=test2;=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line"><span class="string">beforeTextChanged:</span>s=test2;<span class="string">start:</span><span class="number">4</span>;<span class="string">count:</span><span class="number">1</span>;<span class="string">after:</span><span class="number">0</span></span><br><span class="line"><span class="string">onTextChanged:</span>s=test;<span class="string">start:</span><span class="number">4</span>;<span class="string">before:</span><span class="number">1</span>;<span class="string">count:</span><span class="number">0</span></span><br><span class="line"><span class="string">afterTextChanged:</span>s=test;=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>4.在<code>test</code>基础上三处<code>st</code>并立即输入<code>45</code>看变化</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">beforeTextChanged:</span>s=test;<span class="string">start:</span><span class="number">3</span>;<span class="string">count:</span><span class="number">1</span>;<span class="string">after:</span><span class="number">0</span></span><br><span class="line"><span class="string">onTextChanged:</span>s=tes;<span class="string">start:</span><span class="number">3</span>;<span class="string">before:</span><span class="number">1</span>;<span class="string">count:</span><span class="number">0</span></span><br><span class="line"><span class="string">afterTextChanged:</span>s=tes;=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line"><span class="string">beforeTextChanged:</span>s=tes;<span class="string">start:</span><span class="number">2</span>;<span class="string">count:</span><span class="number">1</span>;<span class="string">after:</span><span class="number">0</span></span><br><span class="line"><span class="string">onTextChanged:</span>s=te;<span class="string">start:</span><span class="number">2</span>;<span class="string">before:</span><span class="number">1</span>;<span class="string">count:</span><span class="number">0</span></span><br><span class="line"><span class="string">afterTextChanged:</span>s=te;=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line"><span class="string">beforeTextChanged:</span>s=te;<span class="string">start:</span><span class="number">2</span>;<span class="string">count:</span><span class="number">0</span>;<span class="string">after:</span><span class="number">1</span></span><br><span class="line"><span class="string">onTextChanged:</span>s=te4;<span class="string">start:</span><span class="number">2</span>;<span class="string">before:</span><span class="number">0</span>;<span class="string">count:</span><span class="number">1</span></span><br><span class="line"><span class="string">afterTextChanged:</span>s=te4;=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line"><span class="string">beforeTextChanged:</span>s=te4;<span class="string">start:</span><span class="number">3</span>;<span class="string">count:</span><span class="number">0</span>;<span class="string">after:</span><span class="number">1</span></span><br><span class="line"><span class="string">onTextChanged:</span>s=te45;<span class="string">start:</span><span class="number">3</span>;<span class="string">before:</span><span class="number">0</span>;<span class="string">count:</span><span class="number">1</span></span><br><span class="line"><span class="string">afterTextChanged:</span>s=te45;=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>每发生一个字符变化，就会触发 <code>beforeTextChanged</code>，<code>onTextChanged</code>，<code>afterTextChanged</code>方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;addTextChangedListener的三个方法&quot;&gt;&lt;a href=&quot;#addTextChangedListener的三个方法&quot; class=&quot;headerlink&quot; title=&quot;addTextChangedListener的三个方法&quot;&gt;&lt;/a&gt;addTe
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/uncategorized/2019/03/04/Android/%E5%9C%A8%E9%9D%9EActivity%E4%B8%AD%E4%BD%BF%E7%94%A8startActivity-2019-03-04/"/>
    <id>http://yoursite.com/uncategorized/2019/03/04/Android/在非Activity中使用startActivity-2019-03-04/</id>
    <published>2019-03-04T13:38:08.625Z</published>
    <updated>2019-03-04T13:38:08.625Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在非Activity页面，不方便获取context的地方，调用自定义的startActivity（）"><a href="#在非Activity页面，不方便获取context的地方，调用自定义的startActivity（）" class="headerlink" title="在非Activity页面，不方便获取context的地方，调用自定义的startActivity（）"></a>在非Activity页面，不方便获取context的地方，调用自定义的startActivity（）</h1><p>在LoginActivity中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      Intent intent = <span class="keyword">new</span> Intent(TerminalApp.getInstance(), LoginActivity.class);</span><br><span class="line">      intent.putExtra(AppConst.ERROR_PROCESSOR_KEY, <span class="keyword">true</span>);</span><br><span class="line">      TerminalApp.getInstance().startActivity(intent);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在异常拦截器里调用<code>startActivity</code>，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> 异常的一个拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorInterceptor</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Func1</span>&lt;<span class="title">Throwable</span>, <span class="title">Observable</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;T&gt; <span class="title">call</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">"ErrorInterceptor"</span>, <span class="string">"跳转到登录页"</span>);</span><br><span class="line">        <span class="comment">//        后台静默登录后，还是token失效，跳转到强制登录页登录</span></span><br><span class="line">        <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> ApiException) &#123;</span><br><span class="line">            ApiException ex = (ApiException) throwable;</span><br><span class="line">            <span class="comment">//  token失效</span></span><br><span class="line">            <span class="keyword">if</span> (ex.getCode() == ApiCode.Http.UNAUTHORIZED) &#123;</span><br><span class="line">                <span class="comment">//  强制跳转到到登录页</span></span><br><span class="line">                Log.i(<span class="string">"ErrorInterceptor跳转到登录页"</span>, ex.getCode() + <span class="string">""</span>);</span><br><span class="line"><span class="comment">//                Intent intent = new Intent(TerminalApp.getInstance(), LoginActivity.class);</span></span><br><span class="line"><span class="comment">//                intent.putExtra(AppConst.ERROR_PROCESSOR_KEY,true);</span></span><br><span class="line"><span class="comment">//                mContext.startActivity(intent);</span></span><br><span class="line">                LoginActivity.startActivity();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Observable.error(ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// return Observable.error(throwable);</span></span><br><span class="line">        <span class="keyword">return</span> Observable.error(ApiException.handleException(throwable));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>错误提示信息<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Calling startActivity() <span class="built_in">from</span> outside <span class="keyword">of</span> <span class="keyword">an</span> Activity  context requires <span class="keyword">the</span>  </span><br><span class="line">FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?</span><br></pre></td></tr></table></figure></p><p>解决方案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br></pre></td></tr></table></figure><p>参考：<a href="https://stackoverflow.com/questions/3918517/calling-startactivity-from-outside-of-an-activity-context" target="_blank" rel="noopener">https://stackoverflow.com/questions/3918517/calling-startactivity-from-outside-of-an-activity-context</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在非Activity页面，不方便获取context的地方，调用自定义的startActivity（）&quot;&gt;&lt;a href=&quot;#在非Activity页面，不方便获取context的地方，调用自定义的startActivity（）&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/uncategorized/2019/02/28/Android/%E5%9C%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E8%AF%B7%E6%B1%82%E6%9D%83%E9%99%90-2019-01-15/"/>
    <id>http://yoursite.com/uncategorized/2019/02/28/Android/在运行时请求权限-2019-01-15/</id>
    <published>2019-02-28T12:23:15.245Z</published>
    <updated>2019-02-28T12:23:15.245Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在运行时请求权限"><a href="#在运行时请求权限" class="headerlink" title="在运行时请求权限"></a>在运行时请求权限</h1><p>转载自：<a href="https://developer.android.com/training/permissions/requesting?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.com/training/permissions/requesting?hl=zh-cn</a></p><h1 id="在运行时请求权限-1"><a href="#在运行时请求权限-1" class="headerlink" title="在运行时请求权限"></a>在运行时请求权限</h1><p>从 Android 6.0（API 级别 23）开始，用户开始在应用运行时向其授予权限，而不是在应用安装时授予。此方法可以简化应用安装过程，因为用户在安装或更新应用时不需要授予权限。它还让用户可以对应用的功能进行更多控制；例如，用户可以选择为相机应用提供相机访问权限，而不提供设备位置的访问权限。用户可以随时进入应用的“Settings”屏幕调用权限。</p><p>系统权限分为两类：<em>正常权限</em>和<em>危险权限</em>：</p><ul><li>正常权限不会直接给用户隐私权带来风险。如果您的应用在其清单中列出了正常权限，系统将自动授予该权限。</li><li>危险权限会授予应用访问用户机密数据的权限。如果您的应用在其清单中列出了正常权限，系统将自动授予该权限。如果您列出了危险权限，则用户必须明确批准您的应用使用这些权限。</li></ul><p>如需了解详细信息，请参阅<a href="https://developer.android.com/guide/topics/security/permissions.html?hl=zh-cn#normal-dangerous" target="_blank" rel="noopener">正常权限和危险权限</a>。</p><p>在所有版本的 Android 中，您的应用都需要在其应用清单中同时声明它需要的正常权限和危险权限，如<a href="https://developer.android.com/training/permissions/declaring.html?hl=zh-cn" target="_blank" rel="noopener">声明权限</a>中所述。不过，该声明的<em>影响</em>因系统版本和应用的目标 SDK 级别的不同而有所差异：</p><ul><li>如果设备运行的是 Android 5.1 或更低版本，<strong>或者</strong>应用的目标 SDK 为 22 或更低：如果您在清单中列出了危险权限，则用户必须在安装应用时授予此权限；如果他们不授予此权限，系统根本不会安装应用。</li><li>如果设备运行的是 Android 6.0 或更高版本，<strong>或者</strong>应用的目标 SDK 为 23 或更高：应用必须在清单中列出权限，<em>并且</em>它必须在运行时请求其需要的每项危险权限。用户可以授予或拒绝每项权限，且即使用户拒绝权限请求，应用仍可以继续运行有限的功能。</li></ul><p><strong>注</strong>：从 Android 6.0（API 级别 23）开始，用户可以随时从任意应用调用权限，即使应用面向较低的 API 级别也可以调用。无论您的应用面向哪个 API 级别，您都应对应用进行测试，以验证它在缺少需要的权限时行为是否正常。</p><p>本课将介绍如何使用 Android <a href="https://developer.android.com/tools/support-library/index.html?hl=zh-cn" target="_blank" rel="noopener">支持库</a>来检查和请求权限。Android 框架从 Android 6.0（API 级别 23）开始提供类似方法。不过，使用支持库更简单，因为在调用方法前，您的应用不需要检查它在哪个版本的 Android 上运行。</p><h2 id="检查权限"><a href="#检查权限" class="headerlink" title="检查权限"></a>检查权限</h2><p>如果您的应用需要危险权限，则每次执行需要这一权限的操作时您都必须检查自己是否具有该权限。用户始终可以自由调用此权限，因此，即使应用昨天使用了相机，它不能假设自己今天仍具有该权限。</p><p>要检查您是否具有某项权限，请调用 <a href="https://developer.android.com/reference/android/support/v4/content/ContextCompat.html?hl=zh-cn#checkSelfPermission(android.content.Context,%20java.lang.String" target="_blank" rel="noopener">ContextCompat.checkSelfPermission()</a>) 方法。例如，以下代码段显示了如何检查 Activity 是否具有在日历中进行写入的权限：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Assume thisActivity is the current activity</span></span><br><span class="line"><span class="keyword">int</span> permissionCheck =  ContextCompat.checkSelfPermission(thisActivity, Manifest.permission.WRITE_CALENDAR);</span><br></pre></td></tr></table></figure><p>如果应用具有此权限，方法将返回 <a href="https://developer.android.com/reference/android/content/pm/PackageManager.html?hl=zh-cn#PERMISSION_GRANTED" target="_blank" rel="noopener">PackageManager.PERMISSION_GRANTED</a>，并且应用可以继续操作。如果应用不具有此权限，方法将返回 <a href="https://developer.android.com/reference/android/content/pm/PackageManager.html?hl=zh-cn#PERMISSION_DENIED" target="_blank" rel="noopener">PERMISSION_DENIED</a>，且应用必须明确向用户要求权限。</p><h2 id="请求权限"><a href="#请求权限" class="headerlink" title="请求权限"></a>请求权限</h2><p>如果您的应用需要应用清单中列出的危险权限，那么，它必须要求用户授予该权限。Android 为您提供了多种权限请求方式。调用这些方法将显示一个标准的 Android 对话框，不过，您不能对它们进行自定义。</p><h3 id="解释应用为什么需要权限"><a href="#解释应用为什么需要权限" class="headerlink" title="解释应用为什么需要权限"></a>解释应用为什么需要权限</h3><p><img src="media/request_permission_dialog.png" alt=""></p><p><strong>图 1.</strong> 提示用户授予或拒绝权限的系统对话框。</p><p>在某些情况下，您可能需要帮助用户了解您的应用为什么需要某项权限。例如，如果用户启动一个摄影应用，用户对应用要求使用相机的权限可能不会感到吃惊，但用户可能无法理解为什么此应用想要访问用户的位置或联系人。在请求权限之前，不妨为用户提供一个解释。请记住，您不需要通过解释来说服用户；如果您提供太多解释，用户可能发现应用令人失望并将其移除。</p><p>您可以采用的一个方法是仅在用户已拒绝某项权限请求时提供解释。如果用户继续尝试使用需要某项权限的功能，但继续拒绝权限请求，则可能表明用户不理解应用为什么需要此权限才能提供相关功能。对于这种情况，比较好的做法是显示解释。</p><p>为了帮助查找用户可能需要解释的情形，Android 提供了一个实用程序方法，即 <a href="https://developer.android.com/reference/android/support/v4/app/ActivityCompat.html?hl=zh-cn#shouldShowRequestPermissionRationale(android.app.Activity,%20java.lang.String" target="_blank" rel="noopener">shouldShowRequestPermissionRationale()</a>)。如果应用之前请求过此权限但用户拒绝了请求，此方法将返回 <code>true</code>。</p><blockquote><p><strong>注</strong>：如果用户在过去拒绝了权限请求，并在权限请求系统对话框中选择了 <strong>Don’t ask again</strong> 选项(中文系统为：<code>不再询问</code>)，此方法将返回 <code>false</code>。如果设备规范禁止应用具有该权限，此方法也会返回 <code>false</code>。</p></blockquote><h3 id="请求您需要的权限"><a href="#请求您需要的权限" class="headerlink" title="请求您需要的权限"></a>请求您需要的权限</h3><p>如果应用尚无所需的权限，则应用必须调用一个 <strong><a href="https://developer.android.com/reference/android/support/v4/app/ActivityCompat.html?hl=zh-cn#requestPermissions(android.app.Activity,%20java.lang.String[],%20int" target="_blank" rel="noopener">requestPermissions()</a>)</strong> 方法，以请求适当的权限。应用将传递其所需的权限，以及您指定用于识别此权限请求的整型<em>请求代码</em>。此方法异步运行：它会立即返回，并且在用户响应对话框之后，系统会使用结果调用应用的回调方法，将应用传递的相同请求代码传递到 <strong><a href="https://developer.android.com/reference/android/support/v4/app/ActivityCompat.html?hl=zh-cn#requestPermissions(android.app.Activity,%20java.lang.String[],%20int" target="_blank" rel="noopener">requestPermissions()</a>)</strong>。</p><p>以下代码可以检查应用是否具备读取用户联系人的权限，并根据需要请求该权限：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Here, thisActivity is the current activity</span></span><br><span class="line"><span class="keyword">if</span> (ContextCompat.checkSelfPermission(thisActivity,</span><br><span class="line">                Manifest.permission.READ_CONTACTS)</span><br><span class="line">        != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Should we show an explanation?</span></span><br><span class="line">    <span class="keyword">if</span> (ActivityCompat.shouldShowRequestPermissionRationale(thisActivity,</span><br><span class="line">            Manifest.permission.READ_CONTACTS)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Show an expanation to the user *asynchronously* -- don't block</span></span><br><span class="line">        <span class="comment">// this thread waiting for the user's response! After the user</span></span><br><span class="line">        <span class="comment">// sees the explanation, try again to request the permission.</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// No explanation needed, we can request the permission.</span></span><br><span class="line"></span><br><span class="line">        ActivityCompat.requestPermissions(thisActivity,</span><br><span class="line">                <span class="keyword">new</span> String[]&#123;Manifest.permission.READ_CONTACTS&#125;,</span><br><span class="line">                MY_PERMISSIONS_REQUEST_READ_CONTACTS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// MY_PERMISSIONS_REQUEST_READ_CONTACTS is an</span></span><br><span class="line">        <span class="comment">// app-defined int constant. The callback method gets the</span></span><br><span class="line">        <span class="comment">// result of the request.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：当您的应用调用 <a href="https://developer.android.com/reference/android/support/v4/app/ActivityCompat.html?hl=zh-cn#requestPermissions(android.app.Activity,%20java.lang.String[],%20int" target="_blank" rel="noopener">requestPermissions()</a>) 时，系统将向用户显示一个标准对话框。您的应用<em>无法</em>配置或更改此对话框。如果您需要为用户提供任何信息或解释，您应在调用 <a href="https://developer.android.com/reference/android/support/v4/app/ActivityCompat.html?hl=zh-cn#requestPermissions(android.app.Activity,%20java.lang.String[],%20int" target="_blank" rel="noopener">requestPermissions()</a>) 之前进行，如<a href="https://developer.android.com/training/permissions/requesting?hl=zh-cn#explain" target="_blank" rel="noopener">解释应用为什么需要权限</a>中所述。</p><h3 id="处理权限请求响应"><a href="#处理权限请求响应" class="headerlink" title="处理权限请求响应"></a>处理权限请求响应</h3><p>当应用请求权限时，系统将向用户显示一个对话框。当用户响应时，系统将调用应用的 <a href="https://developer.android.com/reference/android/support/v4/app/ActivityCompat.OnRequestPermissionsResultCallback.html?hl=zh-cn#onRequestPermissionsResult(int,%20java.lang.String[],%20int[]" target="_blank" rel="noopener">onRequestPermissionsResult()</a>)方法，向其传递用户响应。您的应用必须替换该方法，以了解是否已获得相应权限。回调会将您传递的相同请求代码传递给 <a href="https://developer.android.com/reference/android/support/v4/app/ActivityCompat.html?hl=zh-cn#requestPermissions(android.app.Activity,%20java.lang.String[],%20int" target="_blank" rel="noopener">requestPermissions()</a>)。例如，如果应用请求 <a href="https://developer.android.com/reference/android/Manifest.permission.html?hl=zh-cn#READ_CONTACTS" target="_blank" rel="noopener">READ_CONTACTS</a> 访问权限，则它可能采用以下回调方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode,</span></span></span><br><span class="line"><span class="function"><span class="params">        String permissions[], <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">        <span class="keyword">case</span> MY_PERMISSIONS_REQUEST_READ_CONTACTS: &#123;</span><br><span class="line">            <span class="comment">// If request is cancelled, the result arrays are empty.</span></span><br><span class="line">            <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span></span><br><span class="line">                &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// permission was granted, yay! Do the</span></span><br><span class="line">                <span class="comment">// contacts-related task you need to do.</span></span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// permission denied, boo! Disable the</span></span><br><span class="line">                <span class="comment">// functionality that depends on this permission.</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// other 'case' lines to check for other</span></span><br><span class="line">        <span class="comment">// permissions this app might request</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>系统显示的对话框说明了您的应用需要访问的<a href="https://developer.android.com/guide/topics/security/permissions.html?hl=zh-cn#perm-groups" target="_blank" rel="noopener">权限组</a>；它不会列出具体权限。例如，如果您请求 <a href="https://developer.android.com/reference/android/Manifest.permission.html?hl=zh-cn#READ_CONTACTS" target="_blank" rel="noopener">READ_CONTACTS</a> 权限，系统对话框只显示您的应用需要访问设备的联系人。用户只需要为每个权限组授予一次权限。如果您的应用请求该组中的任何其他权限（已在您的应用清单中列出），系统将自动授予应用这些权限。当您请求此权限时，系统会调用您的 <a href="https://developer.android.com/reference/android/support/v4/app/ActivityCompat.OnRequestPermissionsResultCallback.html?hl=zh-cn#onRequestPermissionsResult(int,%20java.lang.String[],%20int[]" target="_blank" rel="noopener">onRequestPermissionsResult()</a>) 回调方法，并传递 <a href="https://developer.android.com/reference/android/content/pm/PackageManager.html?hl=zh-cn#PERMISSION_GRANTED" target="_blank" rel="noopener">PERMISSION_GRANTED</a>，如果用户已通过系统对话框明确同意您的权限请求，系统将采用相同方式操作。</p><blockquote><p><strong>注</strong>：您的应用仍需要明确请求其需要的每项权限，即使用户已向应用授予该权限组中的其他权限。此外，权限分组在将来的 Android 版本中可能会发生变化。您的代码不应依赖特定权限属于或不属于相同组这种假设。</p></blockquote><p>例如，假设您在应用清单中列出了 <a href="https://developer.android.com/reference/android/Manifest.permission.html?hl=zh-cn#READ_CONTACTS" target="_blank" rel="noopener">READ_CONTACTS</a> 和 <a href="https://developer.android.com/reference/android/Manifest.permission.html?hl=zh-cn#WRITE_CONTACTS" target="_blank" rel="noopener">WRITE_CONTACTS</a>。如果您请求 <a href="https://developer.android.com/reference/android/Manifest.permission.html?hl=zh-cn#READ_CONTACTS" target="_blank" rel="noopener">READ_CONTACTS</a> 且用户授予了此权限，那么，当您请求 <a href="https://developer.android.com/reference/android/Manifest.permission.html?hl=zh-cn#WRITE_CONTACTS" target="_blank" rel="noopener">WRITE_CONTACTS</a> 时，系统将立即授予您该权限，不会与用户交互。</p><p>如果用户拒绝了某项权限请求，您的应用应采取适当的操作。例如，您的应用可能显示一个对话框，解释它为什么无法执行用户已经请求但需要该权限的操作。</p><p>当系统要求用户授予权限时，用户可以选择指示系统不再要求提供该权限。这种情况下，无论应用在什么时候使用 <a href="https://developer.android.com/reference/android/support/v4/app/ActivityCompat.html?hl=zh-cn#requestPermissions(android.app.Activity,%20java.lang.String[],%20int" target="_blank" rel="noopener">requestPermissions()</a>) 再次要求该权限，系统都会立即拒绝此请求。系统会调用您的 <a href="https://developer.android.com/reference/android/support/v4/app/ActivityCompat.OnRequestPermissionsResultCallback.html?hl=zh-cn#onRequestPermissionsResult(int,%20java.lang.String[],%20int[]" target="_blank" rel="noopener">onRequestPermissionsResult()</a>) 回调方法，并传递 <a href="https://developer.android.com/reference/android/content/pm/PackageManager.html?hl=zh-cn#PERMISSION_DENIED" target="_blank" rel="noopener">PERMISSION_DENIED</a>，如果用户再次明确拒绝了您的请求，系统将采用相同方式操作。这意味着当您调用 <a href="https://developer.android.com/reference/android/support/v4/app/ActivityCompat.html?hl=zh-cn#requestPermissions(android.app.Activity,%20java.lang.String[],%20int" target="_blank" rel="noopener">requestPermissions()</a>) 时，您不能假设已经发生与用户的任何直接交互。</p><p>[</p><p>上一页</p><p>arrow_backOverview](<a href="https://developer.android.com/guide/topics/permissions/overview?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.com/guide/topics/permissions/overview?hl=zh-cn</a>)</p><p>[</p><p>下一页</p><p>arrow_forwardApp permissions best practices](<a href="https://developer.android.com/training/permissions/usage-notes?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.com/training/permissions/usage-notes?hl=zh-cn</a>)</p><p>Content and code samples on this page are subject to the licenses described in the <a href="https://developer.android.com/license" target="_blank" rel="noopener">Content License</a>. Java is a registered trademark of Oracle and/or its affiliates.</p><p>上次更新日期：四月 25, 2018</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在运行时请求权限&quot;&gt;&lt;a href=&quot;#在运行时请求权限&quot; class=&quot;headerlink&quot; title=&quot;在运行时请求权限&quot;&gt;&lt;/a&gt;在运行时请求权限&lt;/h1&gt;&lt;p&gt;转载自：&lt;a href=&quot;https://developer.android.com/tra
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/uncategorized/2019/02/27/Programmer/HTTP%20%E5%93%8D%E5%BA%94%E4%BB%A3%E7%A0%81-2019-01-14/"/>
    <id>http://yoursite.com/uncategorized/2019/02/27/Programmer/HTTP 响应代码-2019-01-14/</id>
    <published>2019-02-27T12:01:27.599Z</published>
    <updated>2019-02-27T12:01:27.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP-响应代码"><a href="#HTTP-响应代码" class="headerlink" title="HTTP 响应代码"></a>HTTP 响应代码</h1><h2 id="400"><a href="#400" class="headerlink" title="400"></a>400</h2><p>400 是 HTTP 的状态码，主要有两种形式：</p><p>1、bad request 意思是 “错误的请求”；<br>2、invalid hostname 意思是 “不存在的域名”。<br>400 Bad Request 是由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求。</p><p>解决方案：</p><p>1、对照字段名称，类型保证一致性</p><p>2、检查域名<br>3、容易忽略的情况， 400一般是被认为是客户端的错误，但是如果服务器端有，权限管理（用户登录、用户注册）、 业务管理两个子系统，通过一个网关去分别跳转， 在登录时网关负责从客户端的 token中解析出userId并传给权限管理系统，如果网关没有传参数key<code>usrId=</code>即url中根本没有<code>userId=***</code>，而权限管理系统需要userId,则此时也会报错，如果此时还从客户端找问题，非常难找到问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTTP-响应代码&quot;&gt;&lt;a href=&quot;#HTTP-响应代码&quot; class=&quot;headerlink&quot; title=&quot;HTTP 响应代码&quot;&gt;&lt;/a&gt;HTTP 响应代码&lt;/h1&gt;&lt;h2 id=&quot;400&quot;&gt;&lt;a href=&quot;#400&quot; class=&quot;headerlink
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/uncategorized/2019/02/27/Android/Android%E4%B8%AD%20dpi%EF%BC%8C%E5%88%86%E8%BE%A8%E7%8E%87%EF%BC%8C%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8%EF%BC%8Cdp%EF%BC%8Cpx%EF%BC%8Cdip-2019-02-18/"/>
    <id>http://yoursite.com/uncategorized/2019/02/27/Android/Android中 dpi，分辨率，屏幕尺寸，dp，px，dip-2019-02-18/</id>
    <published>2019-02-27T12:01:27.598Z</published>
    <updated>2019-02-27T12:01:27.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android中-dpi，分辨率，屏幕尺寸，dp，px，dip-2019-02-18"><a href="#Android中-dpi，分辨率，屏幕尺寸，dp，px，dip-2019-02-18" class="headerlink" title="Android中 dpi，分辨率，屏幕尺寸，dp，px，dip-2019-02-18"></a>Android中 dpi，分辨率，屏幕尺寸，dp，px，dip-2019-02-18</h1><a href="!--参考：https://www.jianshu.com/p/211cbaa5a59e--">!--参考：https://www.jianshu.com/p/211cbaa5a59e--</a><h3 id="1-什么是屏幕尺寸、分辨率和像素密度？"><a href="#1-什么是屏幕尺寸、分辨率和像素密度？" class="headerlink" title="1.什么是屏幕尺寸、分辨率和像素密度？"></a>1.什么是屏幕尺寸、分辨率和像素密度？</h3><h4 id="屏幕尺寸"><a href="#屏幕尺寸" class="headerlink" title="屏幕尺寸"></a>屏幕尺寸</h4><p>单位：英寸（inch）   1英寸 = 2.54厘米</p><p>目前市场上屏幕尺寸以5.5英寸为主（Android 2018年），数据由【友盟】提供。</p><h4 id="屏幕分辨率："><a href="#屏幕分辨率：" class="headerlink" title="屏幕分辨率："></a>屏幕分辨率：</h4><p>定义：横纵向上的像素点        （ 分辨率越高，显示的效果越好）</p><p>单位：px   1px = 1像素点</p><p> 一般表达的方式，纵向像素 <em> 横向像素 = 1920 </em> 1080</p><p>目前市场上手机屏幕分辨率 还是以1920*1080像素为主</p><h4 id="屏幕像素密度"><a href="#屏幕像素密度" class="headerlink" title="屏幕像素密度"></a>屏幕像素密度</h4><p>定义：指的是每英寸上的像素点        （密度越高，显示效果越好）</p><p>单位：dpi </p><p> <strong><strong><strong><strong>**</strong></strong></strong></strong>像素密度与【屏幕尺寸】和【分辨率】有关<strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></p><p>下面举个“栗子”</p><p>一步4.95英寸、屏幕分辨率是1920*1080的手机，求屏幕像素密度</p><p><img src="https:////upload-images.jianshu.io/upload_images/14042110-2c9ececddb674774.png" alt=""></p><p>手机4.95英寸，指的是手机对角线的长度</p><p><img src="https:////upload-images.jianshu.io/upload_images/14042110-b27d81fe57e99246.png" alt=""></p><p>因为AC=1920，BC=1080，所以AB≈2203</p><p>所以像素密度 = 2203 / 4.95 ≈ 445</p><hr><h3 id="为什么我们要用android开发的时候不用px做为单位？"><a href="#为什么我们要用android开发的时候不用px做为单位？" class="headerlink" title="为什么我们要用android开发的时候不用px做为单位？"></a>为什么我们要用android开发的时候不用px做为单位？</h3><h4 id="px（像素）"><a href="#px（像素）" class="headerlink" title="px（像素）"></a>px（像素）</h4><p>构成图像的最小单位</p><hr><h4 id="dp-、dip"><a href="#dp-、dip" class="headerlink" title="dp 、dip"></a>dp 、dip</h4><p>密度无关像素     【注意，dip和dpi不一样】</p><p>如果在160dpi（像素密度为160），那么 1dip = 1px</p><pre><code>在240dpi（像素密度为240），那么 1.5dip = 1px        （后面会解释，别着急）</code></pre><p>举个“栗子”</p><p>在2部手机中</p><p>A手机 分辨率为 480*320，像素密度为 160DPI</p><p>B手机 分辨率为 800*480，像素密度为 240DPI</p><p><img src="https:////upload-images.jianshu.io/upload_images/14042110-0595c32276fac023.png" alt=""></p><p>A手机</p><p><img src="https://upload-images.jianshu.io/upload_images/14042110-a2e26030751e1eeb.png" alt=""></p><p>B手机</p><p>如果我们图片要在A手机宽度铺满全屏显示的话，我们就得设置图片宽度为320px</p><p>我们要B手机宽度铺满全屏显示，需要设置多少？得设置480px。</p><p>那么问题来了，android手机那么多，分辨率并不是固定的（参考楼上分辨率数据），不像iPhone，屏幕的分辨率是固定的。我们想要图片在每部手机显示都是横向铺满的，设置px的话明显有问题。</p><p>所以，我们开发的时候单位一般设置为dp、dip</p><p>如果我们图片设置320dp，在480*320上，1dp=1px，所以图片是铺满的</p><p>在800<em>480手机上，1px = 1.5dp，所以320dp = 320dp </em> 1.5 = 480dp，所以图片也是铺满的</p><p>可能到这里小伙伴们头脑没转过来，为什么1px在不同分辨率手机上，等于的dp是不同的呢？</p><p>因为手机的像素密度不同啊！</p><p>上面说过dp、dip叫做密度无关像素，你可以这么理解，dp和dip存在的意义，是和像素密度没有关系的。我使用dp作为单位设置控件，不管你什么屏幕大小，多大的dpi，显示的效果始终保持一致。就是专门用于不同手机屏幕分辨率，我却能都适应。至于160dpi里1dp=1px，480dpi里1dp=1.5px，为什么这么设置呢？因为人家google就这么定义的。没必要深究</p><p><strong>px和dp的换算公式：px = dp * (dpi / 160)</strong></p><hr><h4 id="sp"><a href="#sp" class="headerlink" title="sp"></a>sp</h4><p>定义：根据字体首选项进行缩放</p><p>sp绝大部分都是用来设置文字大小的大小.</p><p>google开发指导手册上推荐我们设置12sp以上大小的单位，不要用12sp以下，以为用户可能看不清。推荐使用大小有12sp、14sp、18sp和22sp作为我们首选的字体大小。</p><p>字体设置的时候    不能有   小数和奇数。因为字体放缩的时候可能对精度的丢失</p><p>==写法好像有错误==</p><blockquote><p>以上写法有误，<br>如果屏幕密度较高，密度无关像素会相应扩展至整个屏幕。1dp在设备屏幕上总是等于1/160英寸。使用dp的好处是，无论屏幕密度如何，总能获得同样的尺寸。 《Android开发权威指南》<br>1dp = 1/160 英寸, </p></blockquote><a href="!--参考：https://www.jianshu.com/p/a585841282a8--">!--参考：https://www.jianshu.com/p/a585841282a8--</a><h4 id="1-先来看几个概念"><a href="#1-先来看几个概念" class="headerlink" title="1.先来看几个概念"></a>1.先来看几个概念</h4><ul><li>分辨率，像 1920x1080</li><li>屏幕像素密度：屏幕每英寸所包含的像素数</li><li>dpi：（Dots Per Inch，每英寸点数）一种度量单位</li></ul><p>怎么根据分辨率和屏幕尺寸计算<strong>屏幕密度</strong>？</p><p><img src="https://upload-images.jianshu.io/upload_images/6502966-04dda14f6b140a49.png" alt=""></p><p>计算屏幕密度.png</p><p>那440dpi在android中是什么样的概念呢？</p><p><img src="https://upload-images.jianshu.io/upload_images/6502966-28a0a0ad25f3587f.png" alt=""></p><p>谷歌官方文档中对于密度的分类.png</p><p>属于xxhdpi这一分类 ，那么其运行时加载的图片也是xxhdpi文件夹下的。</p><h4 id="2-接下来看px与dp还有dip的关系"><a href="#2-接下来看px与dp还有dip的关系" class="headerlink" title="2.接下来看px与dp还有dip的关系"></a>2.接下来看px与dp还有dip的关系</h4><ul><li>dp其实就是dip：设备独立像素（又称设备无关像素 Device Independent Pixels 、密度独立性 Density ndependent或设备独立像素，简称DIP或DP）。<br>  dp也是谷歌推荐的android开发中使用单位。</li><li>px：像素</li></ul><p>一般UI拿过来的图就是px标注的，然后会告诉你做图时所用的尺寸是多大的，如1334x750，4.7寸的屏幕</p><p><img src="https://upload-images.jianshu.io/upload_images/6502966-29f7887633d28e12.png" alt=""></p><p>image.png</p><p>我们该怎么把px转为dp写在android的布局文件中呢？</p><ol><li>先计算UI所给图纸的密度，1334x1334+750x750=2342056<br> 2342056 开根号大概为 1530<br> 1530/4.7 = 325 dpi</li><li>325/160 = 2.03 （160相当于一个标准dpi，是google给定的值，我们所计算的dpi都会与其进行比较）<br> 如图上一个控件是高80px，那 80/2.03 大概40dp，我们一般就在布局文件设置40dp</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android中-dpi，分辨率，屏幕尺寸，dp，px，dip-2019-02-18&quot;&gt;&lt;a href=&quot;#Android中-dpi，分辨率，屏幕尺寸，dp，px，dip-2019-02-18&quot; class=&quot;headerlink&quot; title=&quot;Android中
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/uncategorized/2019/02/27/Android/Android%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%862019-02-12/"/>
    <id>http://yoursite.com/uncategorized/2019/02/27/Android/Android基础知识2019-02-12/</id>
    <published>2019-02-27T12:01:27.598Z</published>
    <updated>2019-02-27T12:01:27.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android基础知识"><a href="#Android基础知识" class="headerlink" title="Android基础知识"></a>Android基础知识</h1><h2 id="tools-listitem-可以预览RecyclerView加入Item-Layout后的效果"><a href="#tools-listitem-可以预览RecyclerView加入Item-Layout后的效果" class="headerlink" title="tools:listitem 可以预览RecyclerView加入Item Layout后的效果"></a>tools:listitem 可以预览RecyclerView加入Item Layout后的效果</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">                                        <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">                                        <span class="attr">android:id</span>=<span class="string">"@+id/rv_content"</span></span></span><br><span class="line"><span class="tag">                                        <span class="attr">style</span>=<span class="string">"@style/MatchMatch"</span></span></span><br><span class="line"><span class="tag">                                        <span class="attr">android:background</span>=<span class="string">"#ccc"</span></span></span><br><span class="line"><span class="tag">                                        <span class="attr">android:scrollbars</span>=<span class="string">"none"</span></span></span><br><span class="line"><span class="tag">                                        <span class="attr">tools:listitem</span>=<span class="string">"@layout/item_normal"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="EditText-中"><a href="#EditText-中" class="headerlink" title="EditText 中"></a>EditText 中</h2><p>获取焦点并不能触发 addTextChangedListener 监听中的三个方法， 改变字符可以，增、删、删增、可以触发。   </p><h2 id="gradle"><a href="#gradle" class="headerlink" title="gradle"></a>gradle</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//zip优化</span></span><br><span class="line">            zipAlignEnabled <span class="literal">true</span></span><br><span class="line"><span class="comment">//   参考 https://stackoverflow.com/questions/52310841/removing-unused-resources-requires-unused-code-shrinking-to-be-turned-on</span></span><br><span class="line">            <span class="comment">//移除无用的resource文件</span></span><br><span class="line">            shrinkResources <span class="literal">true</span></span><br><span class="line">            minifyEnabled <span class="literal">true</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.txt'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android基础知识&quot;&gt;&lt;a href=&quot;#Android基础知识&quot; class=&quot;headerlink&quot; title=&quot;Android基础知识&quot;&gt;&lt;/a&gt;Android基础知识&lt;/h1&gt;&lt;h2 id=&quot;tools-listitem-可以预览RecyclerVi
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/uncategorized/2019/02/27/Android/android%20studio%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE%E5%90%8D-2018-03-21/"/>
    <id>http://yoursite.com/uncategorized/2019/02/27/Android/android studio修改项目名-2018-03-21/</id>
    <published>2019-02-27T12:01:27.598Z</published>
    <updated>2019-02-27T12:01:27.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="android-studio修改项目名-project-name"><a href="#android-studio修改项目名-project-name" class="headerlink" title="android studio修改项目名(project name)"></a>android studio修改项目名(project name)</h1><p>在使用Android studio 开发，想要修改我们的工程名或者包名，却感到无从下手该怎么办呢？</p><p>一般修改工程名都会： 选中工程右键 &gt; refactor &gt; rename 填好名字确定后被提示 ”can’t rename root module” 因为Android Studio只能修改根目录内的所有文件。</p><h2 id="修改Project工程名解决办法"><a href="#修改Project工程名解决办法" class="headerlink" title="修改Project工程名解决办法:"></a>修改Project工程名解决办法:</h2><ul><li><p>1.首先关闭Android studio，然后找到工程所在的文件夹，把工程文件夹重命名为想要的名字。<br>如图：<br><img src="images/20160922202343326." alt=""></p></li><li><p>2.用Android studio重新打开android_service这个工程。<br>如图：<br><img src="images/15216172535629.jpg" alt=""><br>改为<br><img src="images/15216173050327.jpg" alt=""></p></li></ul><p><strong>以下演示的都是，修改后的，</strong></p><ul><li>3.修改 .iml文件名为terminal-android-guizhou.iml 和这个文件里面的 </li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;module external<span class="selector-class">.linked</span><span class="selector-class">.project</span><span class="selector-class">.id</span>=<span class="string">"terminal-android-guizhou"</span></span><br></pre></td></tr></table></figure><p>如图：<br><img src="images/20160922202450968." alt="这里写图片描述"></p><p><img src="images/15216176485427.jpg" alt=""></p><ul><li><p>4 导入到Android Studio</p></li><li><p>5.目录.idea/modules.xml里面的fileurl导入工程时已经自动改正，可以查看一下。<br>如图：<br><img src="images/15216839278695.jpg" alt=""></p></li><li>6．Run一下工程Ok了！</li></ul><h2 id="修改Package包名解决办法"><a href="#修改Package包名解决办法" class="headerlink" title="修改Package包名解决办法:"></a>修改Package包名解决办法:</h2><p>在 Project工具栏点击这里<br><img src="images/20160922202838926." alt="这里写图片描述"></p><p>出现下图<br><img src="images/20160922202941016." alt="这里写图片描述"><br>将Compact Empty Middle前面的勾去掉，包的层级将会改变。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;android-studio修改项目名-project-name&quot;&gt;&lt;a href=&quot;#android-studio修改项目名-project-name&quot; class=&quot;headerlink&quot; title=&quot;android studio修改项目名(project 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/uncategorized/2019/02/27/Android/Android%20Error%202019-02-13/"/>
    <id>http://yoursite.com/uncategorized/2019/02/27/Android/Android Error 2019-02-13/</id>
    <published>2019-02-27T12:01:27.597Z</published>
    <updated>2019-02-27T12:01:27.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-Error"><a href="#Android-Error" class="headerlink" title="Android Error"></a>Android Error</h1><h2 id="Android-androidx"><a href="#Android-androidx" class="headerlink" title="Android  androidx"></a>Android  androidx</h2><p>今天使用rxlifecycle时，遇到<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Manifest merger failed : Attribute application@appComponentFactory value=(android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.app</span><span class="selector-class">.CoreComponentFactory</span>) from [com<span class="selector-class">.android</span><span class="selector-class">.support</span>:support-compat:<span class="number">28.0</span>.<span class="number">0</span>-alpha3] AndroidManifest<span class="selector-class">.xml</span>:<span class="number">22</span>:<span class="number">18</span>-<span class="number">91</span></span><br><span class="line">    is also present at [androidx<span class="selector-class">.core</span>:core:<span class="number">1.0</span>.<span class="number">0</span>-alpha3] AndroidManifest<span class="selector-class">.xml</span>:<span class="number">22</span>:<span class="number">18</span>-<span class="number">86</span> value=(androidx<span class="selector-class">.core</span><span class="selector-class">.app</span><span class="selector-class">.CoreComponentFactory</span>).</span><br><span class="line">    Suggestion: add <span class="string">'tools:replace="android:appComponentFactory"'</span> to &lt;application&gt; element at AndroidManifest<span class="selector-class">.xml</span>:<span class="number">5</span>:<span class="number">5</span>-<span class="number">19</span>:<span class="number">19</span> to override.</span><br></pre></td></tr></table></figure></p><p>查看 com.trello.rxlifecycle3的releases信息</p><blockquote><p><a href="https://github.com/trello/RxLifecycle/releases/tag/v3.0.0" target="_blank" rel="noopener">V3.0.0</a><br><a href="https://github.com/dlew" target="_blank" rel="noopener"></a> <a href="https://github.com/dlew" target="_blank" rel="noopener">dlew</a> 发布了这个 on 26 Oct 2018 · 自本次发布以来，有<a href="https://github.com/trello/RxLifecycle/compare/v3.0.0...master" target="_blank" rel="noopener"> 4次提交</a>要掌握</p><ul><li><a href="https://github.com/trello/RxLifecycle/pull/285" target="_blank" rel="noopener">＃285</a>：更新了com.trello.rxlifecycle3的基础包</li><li><a href="https://github.com/trello/RxLifecycle/pull/284" target="_blank" rel="noopener">＃284</a>：弃用rxlifecycle-navi</li><li><a href="https://github.com/trello/RxLifecycle/pull/283" target="_blank" rel="noopener">＃283</a>：升级到AndroidX</li></ul></blockquote><p>==原因是== 从v28开始, android的support库将会进行改进, 28.0.0将会是support库的终结版本. 未来新的特性和改进都会进入Androidx包。所以 ==support和Androidx冲突了==，</p><p>解决方案</p><ul><li>整个项目完全升级到 androidx， android studio 提供了一个按钮<code>Migrate to Androidx</code>，可以迁移到Androidx,前提是使用android 28</li><li>退而求其次，使用低版本的RxLifecycle（没有升级到升级到AndroidX的）<br>因为项目时间紧急，所以我暂时选择使用低版本的RxLifecycle。</li></ul><h2 id="魅族手机遇到的-application-terminated"><a href="#魅族手机遇到的-application-terminated" class="headerlink" title="魅族手机遇到的 application  terminated"></a>魅族手机遇到的 application  terminated</h2><p><code>Meizu M6 Note Android 7.1.2. API 25</code></p><p><code>run</code>能看到的信息<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ adb shell am start -n <span class="string">"com.ctitc.futureterminal/com.ctitc.futureterminal.ui.activity.SplashActivity"</span> -a android.intent.action.MAIN -c android.intent.category.LAUNCHER</span><br><span class="line">Client <span class="keyword">not</span> ready yet<span class="built_in">..</span>Waiting <span class="keyword">for</span> process <span class="keyword">to</span> come online</span><br><span class="line">Connected <span class="keyword">to</span> process 7016 on device xiaomi-mi_5s-88a9c127</span><br><span class="line">Application terminated.</span><br></pre></td></tr></table></figure></p><p>因为看不到<code>logcat</code>的日志，所以无法定位到问题的根源，所以第一步是让<code>logcat</code>输出日志。<br>1.<code>搜索 魅族 logcat 找到</code>打开【设置】中的【开发者选项】，页面底部找到【性能优化】，打开【高级日志输出】，勾选【全部允许】即可<br>2.定位到问题<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Process: com<span class="selector-class">.ctitc</span><span class="selector-class">.futureterminal</span>, PID: <span class="number">14552</span></span><br><span class="line">java<span class="selector-class">.lang</span><span class="selector-class">.NullPointerException</span>: Attempt to invoke virtual method <span class="string">'int android.text.Layout.getLineForOffset(int)'</span> on <span class="selector-tag">a</span> null <span class="selector-tag">object</span> reference</span><br><span class="line">    at android<span class="selector-class">.widget</span><span class="selector-class">.Editor</span><span class="selector-class">.updateCursorPositionMz</span>(Editor<span class="selector-class">.java</span>:<span class="number">7836</span>)</span><br><span class="line">    at android<span class="selector-class">.widget</span><span class="selector-class">.Editor</span><span class="selector-class">.updateCursorsPositions</span>(Editor<span class="selector-class">.java</span>:<span class="number">1963</span>)</span><br></pre></td></tr></table></figure></p><p>3.上网搜索</p><ul><li><a href="https://github.com/android-in-china/Compatibility/issues/11" target="_blank" rel="noopener">https://github.com/android-in-china/Compatibility/issues/11</a></li><li><a href="https://stackoverflow.com/questions/51891415/nullpointerexception-on-meizu-devices-in-editor-updatecursorpositionmz" target="_blank" rel="noopener">https://stackoverflow.com/questions/51891415/nullpointerexception-on-meizu-devices-in-editor-updatecursorpositionmz</a></li></ul><p>因为当时魅族手机不输出 logcat日志，不知道问题出在哪儿，从不同的日期的commit中新建branch 然后测试哪两个相邻日期的branch一个是闪退的一个是不闪退的花费了大量的时间，切记对于不输出logcat的机型，先解决log输出再找问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android-Error&quot;&gt;&lt;a href=&quot;#Android-Error&quot; class=&quot;headerlink&quot; title=&quot;Android Error&quot;&gt;&lt;/a&gt;Android Error&lt;/h1&gt;&lt;h2 id=&quot;Android-androidx&quot;&gt;&lt;a 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/uncategorized/2019/02/27/Android/Android%20View%20%E5%88%86%E6%9E%902019-02-20/"/>
    <id>http://yoursite.com/uncategorized/2019/02/27/Android/Android View 分析2019-02-20/</id>
    <published>2019-02-27T12:01:27.597Z</published>
    <updated>2019-02-27T12:01:27.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-View-分析2019-02-20"><a href="#Android-View-分析2019-02-20" class="headerlink" title="Android View 分析2019-02-20"></a>Android View 分析2019-02-20</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Measure specification mode: The parent has not imposed any constraint</span></span><br><span class="line"><span class="comment">        * on the child. It can be whatever size it wants.</span></span><br><span class="line"><span class="comment">        * 测量规范模式：父级没有对孩子施加任何约束。它可以是它想要的任何尺寸。</span></span><br><span class="line"><span class="comment">        * </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNSPECIFIED = <span class="number">0</span> &lt;&lt; MODE_SHIFT;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Measure specification mode: The parent has determined an exact size</span></span><br><span class="line"><span class="comment">        * for the child. The child is going to be given those bounds regardless</span></span><br><span class="line"><span class="comment">        * of how big it wants to be.</span></span><br><span class="line"><span class="comment">        * 测量规范模式：父母已确定孩子的确切大小。无论孩子想要多大，孩子都将被赋予这些界限。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXACTLY     = <span class="number">1</span> &lt;&lt; MODE_SHIFT;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Measure specification mode: The child can be as large as it wants up</span></span><br><span class="line"><span class="comment">        * to the specified size.</span></span><br><span class="line"><span class="comment">        * 测量规范模式：子项可以达到指定大小所需的大小。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AT_MOST     = <span class="number">2</span> &lt;&lt; MODE_SHIFT;</span><br></pre></td></tr></table></figure><p>android 中使用代码获取A控件的高度，并把此值设置到B控件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//      获取et_sms_code高度</span></span><br><span class="line">       et_sms_code.getViewTreeObserver().addOnGlobalLayoutListener(<span class="keyword">new</span> ViewTreeObserver.OnGlobalLayoutListener() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGlobalLayout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               et_sms_code.getViewTreeObserver().removeOnGlobalLayoutListener(<span class="keyword">this</span>);</span><br><span class="line">               <span class="comment">//                把 et_sms_code的高度传递给 btn_request_sms_code</span></span><br><span class="line">               params.height = et_sms_code.getHeight(); <span class="comment">//height is ready</span></span><br><span class="line">               <span class="comment">// 给btn_request_sms_code设置高度，</span></span><br><span class="line">               btn_request_sms_code.setLayoutParams(params);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ViewGroup.LayoutParams <span class="keyword">params</span> = btn_request_sms_code.getLayoutParams();</span><br><span class="line">       et_sms_code.addOnLayoutChangeListener(<span class="keyword">new</span> View.OnLayoutChangeListener() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLayoutChange</span>(<span class="params">View v, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom, <span class="keyword">int</span> oldLeft, <span class="keyword">int</span> oldTop, <span class="keyword">int</span> oldRight, <span class="keyword">int</span> oldBottom</span>) </span>&#123;</span><br><span class="line">               et_sms_code.removeOnLayoutChangeListener(<span class="keyword">this</span>);</span><br><span class="line">               <span class="keyword">params</span>.height = et_sms_code.getHeight() - <span class="number">10</span>;</span><br><span class="line">               btn_request_sms_code.setLayoutParams(<span class="keyword">params</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><!--参考：* 获取高度-https://stackoverflow.com/questions/3591784/views-getwidth-and-getheight-returns-0* 设置高度- https://stackoverflow.com/questions/5042197/android-set-height-and-width-of-custom-view-programmatically* https://blog.csdn.net/eclipsexys/article/details/39641115* https://yifeng.studio/2017/03/21/android-obtain-view-width-and-heigth-not-zero/-->]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android-View-分析2019-02-20&quot;&gt;&lt;a href=&quot;#Android-View-分析2019-02-20&quot; class=&quot;headerlink&quot; title=&quot;Android View 分析2019-02-20&quot;&gt;&lt;/a&gt;Android Vie
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/uncategorized/2019/02/27/Android/Android%20Profiler%E5%88%86%E4%B8%BA%E4%B8%89%E5%A4%A7%E6%A8%A1%E5%9D%97%EF%BC%9A%20cpu%E3%80%81%E5%86%85%E5%AD%98%20%E3%80%81%E7%BD%91%E7%BB%9C%E3%80%82%E5%9F%BA%E6%9C%AC%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%A8%E4%B8%8A%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E6%9C%89%E8%AE%B2%E5%88%B0%E3%80%82%E8%BF%99%E9%87%8C%E8%AF%A6%E7%BB%86%E8%AF%B4%E4%B8%80%E4%B8%8B-2018-02-28/"/>
    <id>http://yoursite.com/uncategorized/2019/02/27/Android/Android Profiler分为三大模块： cpu、内存 、网络。基本的使用在上一篇文章有讲到。这里详细说一下-2018-02-28/</id>
    <published>2019-02-27T12:01:27.597Z</published>
    <updated>2019-02-27T12:01:27.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-Profiler分为三大模块：-cpu、内存-、网络。基本的使用在上一篇文章有讲到。这里详细说一下"><a href="#Android-Profiler分为三大模块：-cpu、内存-、网络。基本的使用在上一篇文章有讲到。这里详细说一下" class="headerlink" title="Android Profiler分为三大模块： cpu、内存 、网络。基本的使用在上一篇文章有讲到。这里详细说一下"></a>Android Profiler分为三大模块： cpu、内存 、网络。基本的使用在上一篇文章有讲到。这里详细说一下</h1><h2 id="一、-CPU分析器CPU-Profiler"><a href="#一、-CPU分析器CPU-Profiler" class="headerlink" title="一、 CPU分析器CPU Profiler"></a><strong>一、 CPU分析器CPU Profiler</strong></h2><p>CPU分析器可帮助您实时检查应用程序的CPU使用情况和线程活动，并记录方法跟踪，以便您可以优化和调试应用程序的代码。</p><p>要打开CPU Profiler，请按照下列步骤操作：</p><ul><li>点击 <code>View &gt; Tool Windows &gt; Android Profiler</code> (还可以点击工具栏的<img src="images/toolbar-android-profiler.png" alt="image">).</li><li>从Android Profiler工具栏中选择要配置的设备和应用程序进程(如果您已通过USB连接设备但未看到它，请确保已启用USB调试)</li><li>单击CPU时间轴中的任意位置打开CPU Profiler。</li></ul><h3 id="1-1-为什么要优化CPU的使用"><a href="#1-1-为什么要优化CPU的使用" class="headerlink" title="1.1 为什么要优化CPU的使用"></a><strong>1.1 为什么要优化CPU的使用</strong></h3><p>优化CPU使用率有许多优点，例如提供更快更流畅的用户体验，并保持设备电池寿命。它还可以帮助您的应用程序在各种较新旧的设备上运行良好，您可以使用CPU分析器在与应用程序交互时监视CPU使用情况和线程活动，但是，有关应用程序执行代码的更详细信息，应记录并检查方法跟踪。</p><p>对于应用程序进程中的每个线程，您可以找到在一段时间内执行哪些方法以及每个方法在执行期间消耗的CPU资源。您还可以使用方法跟踪来识别调用者和被调用者，调用者是一种调用另一种方法的方法，被调用方是另一种方法调用的方法。您可以使用此信息来确定哪些方法太频繁地调用特定资源繁重的任务，就可以尝试优化应用程序的代码以避免不必要的工作。</p><p>如果要收集详细的系统级数据，帮助您检查本地系统进程并解决由丢帧引起的UI jank，则应使用<a href="https://developer.android.google.cn/studio/profile/systrace-commandline.html" target="_blank" rel="noopener">Systrace</a>。或者，如果要导出使用<a href="https://developer.android.google.cn/reference/android/os/Debug.html" target="_blank" rel="noopener">Debug</a>捕获的.trace文件，则应使用<a href="https://developer.android.google.cn/studio/profile/traceview.html" target="_blank" rel="noopener">Traceview</a></p><h3 id="1-2-CPU-Profiler概述"><a href="#1-2-CPU-Profiler概述" class="headerlink" title="1.2 CPU Profiler概述"></a><strong>1.2 CPU Profiler概述</strong></h3><p>当您打开CPU分析器时，它会立即开始显示应用程序的CPU使用情况和线程活动。你会看到类似于下图的内容<br><img src="images/cpu_profiler_L2-2X.png" alt="image"></p><p>如上图所示，CPU Profiler的默认视图包括以下内容：</p><ul><li>①Event timeline： 显示您的应用程序在其生命周期中转换不同状态的活动，并指示用户与设备的交互，包括屏幕旋转事件。要了解有关事件时间轴的更多信息，包括如何启用它，请阅读我上一篇文章说到的启用高级分析</li><li>②CPU timeline: 显示您的应用程序的实时CPU使用率（占总可用CPU的百分比）以及应用程序使用的线程总数，时间轴还显示其他进程的CPU使用情况（如系统进程或其他应用程序），所以您可以将其与应用程序的使用情况进行比较。您可以通过沿着时间轴的水平轴移动鼠标来检查历史CPU使用率数据。</li><li><p>③Thread activity timeline: 列出属于您的应用程序进程的每个线程，并使用不同的颜色在时间轴上指示其活动。记录方法跟踪后，可以从此时间轴中选择一个线程，在跟踪窗格中检查其数据。 </p><ul><li>绿色: 线程处于活动状态或准备好使用CPU。也就是说，它处于”运行”或”可运行”状态。</li><li>黄色： 线程处于活动状态，但是在完成其工作之前，它正在等待I / O操作（如文件或网络I / O）。</li><li>灰色： 线程正在睡眠，不会消耗任何CPU时间，当线程需要访问尚未可用的资源时，有时会发生这种情况。要么线程进入自愿性睡眠，要么内核使线程休眠，直到所需的资源可用。</li></ul></li><li><p>④Tracing type：允许您选择以下选项之一来确定分析器如何记录方法跟踪。 </p><ul><li>Sampled： 在应用程序执行期间，您可以频繁地捕获应用程序的调用堆栈。profiler将捕获的数据集进行比较，以获取关于应用程序代码执行的时间和资源使用信息。基于sampled跟踪的一个固有问题是，如果您的应用程序在捕获调用堆栈并在下一次捕获之前退出该方法，那么该方法调用不会被分析器记录。如果您对具有这样短生命周期的跟踪方法感兴趣，您应该使用工具跟踪。</li><li>Instrumented： 在您的应用程序运行时记录每个方法调用的开始和结束时的时间戳。收集时间戳并与生成方法跟踪数据进行比较，包括时间信息和CPU使用。请注意，对每种方法进行检测的开销会影响运行时性能，并可能影响性能分析，因此对于具有相对较短的生命周期的方法来说，这更加值得注意。此外，如果您的应用程序在短时间内执行大量的方法，profiler可能很快超过它的文件大小限制，进而不能记录任何进一步的跟踪数据。</li></ul></li><li><p>⑤Record button：开始和停止记录方法跟踪。要了解更多信息，请继续看下去</p><blockquote><p>提示：profiler还报告了Android Studio和Android平台在你的应用程序过程中添加的线程的CPU使用情况，如JDWP、Profile Saver、Studio:VMStats、Studio:Perfa和Studio:Heartbeat(尽管，在线程活动时间线中显示的确切名称可能会有所不同)。这意味着您的应用程序在CPU时间轴上的CPU使用率也会报告这些线程使用的CPU时间。您可以在线程活动时间表中看到这些线程，并监视它们的活动。(但是，由于profiler线程执行native代码，因此无法为它们记录方法跟踪数据。)Android Studio会报告这些数据，这样你就可以很容易地识别出线程活动和CPU使用实际上是由你的应用程序代码引起的。</p></blockquote></li></ul><h3 id="1-3-记录和检查方法跟踪"><a href="#1-3-记录和检查方法跟踪" class="headerlink" title="1.3 记录和检查方法跟踪"></a><strong>1.3 记录和检查方法跟踪</strong></h3><p>要开始记录方法跟踪，从下拉菜单中选择<code>Sampled</code>或<code>Instrumented</code>类型，然后单击<code>Record</code>开始进行记录，完成后点击<code>Stop recording</code>停止记录。profiler自动选择记录的时间帧，并在方法跟踪窗格中显示它的跟踪信息，如下图所示。如果要检查不同线程的方法跟踪，只需从线程活动时间轴中选择它。<br><img src="images/cpu_profiler_L3-2X.png" alt="image"></p><ul><li>① Selected time frame: 在跟踪窗格中检查的记录时间框架的部分。当您第一次记录一个方法跟踪时，CPU分析器将自动选择您在CPU时间线中记录的整个长度。如果要检查仅记录的时间帧的一部分的方法跟踪数据，您可以单击并拖动高亮显示区域的边缘来修改它的长度。</li><li>②Timestamp： 表示记录方法跟踪的开始和结束时间(相对于profiler开始从设备收集CPU使用信息时)。你可以点击时间戳来自动选择整个记录作为你选定的时间框架——如果你有多个你想要转换的记录，这是非常有用的。</li><li>③Trace pane：显示您所选择的时间框架和线程的方法跟踪数据。仅当您记录至少一个方法跟踪后，此窗格才会显示。在此窗格中，您可以选择如何查看每个堆栈跟踪（使用跟踪选项卡）以及如何测量执行时间（使用时间参考下拉菜单）。</li><li>④: 选择显示为Top Down tree, Bottom Up tree, Call Chart, or Flame Chart这些类型的图。您可以在下面的部分中了解有关每个跟踪窗格选项卡的更多信息。</li><li><p>从下拉菜单中选择以下选项之一，以确定如何测量每个方法调用的时序信息： </p><ul><li>Wall clock time： 表示实际经过时间。</li><li>Thread time：计时信息表示实际的消耗时间减去不消耗CPU资源的那段时间的任何部分。对于任何给定的方法，它的线程时间总是小于或等于它的时钟时间。使用线程时间让您更好地了解给定方法所消耗的线程实际CPU使用量</li></ul></li></ul><h4 id="1-3-1-使用Call-Chart选项卡检查跟踪"><a href="#1-3-1-使用Call-Chart选项卡检查跟踪" class="headerlink" title="1.3.1 使用Call Chart选项卡检查跟踪"></a><strong>1.3.1 使用Call Chart选项卡检查跟踪</strong></h4><p>Call Chart选项卡提供一个方法跟踪的图形表示，其中一个方法调用(或调用者)的周期和时间在水平轴上表示，而它的callees则显示在垂直轴上。对系统api的方法调用以橙色显示，调用您的应用程序自己的方法以绿色显示，方法调用第三方api(包括java语言api)以蓝色显示。下面的图显示了一个示例调用图，并说明了给定方法的自时间、子时间和总时间的概念。关于如何使用自上而下和自下而上检查痕迹的部分，请继续看下去</p><p><img src="images/call_chart_1-2X.png" alt="图3"></p><blockquote><p>提示： 如果想要跳转到方法的源代码，请右键单击该方法，然后选择<code>Jump to Source</code>。这可以从任何窗格选项卡工作。</p></blockquote><h4 id="1-3-2-使用火焰图表-Flame-Chart-选项卡检查痕迹"><a href="#1-3-2-使用火焰图表-Flame-Chart-选项卡检查痕迹" class="headerlink" title="1.3.2 使用火焰图表(Flame Chart)选项卡检查痕迹"></a><strong>1.3.2 使用火焰图表(Flame Chart)选项卡检查痕迹</strong></h4><p>火焰图选项卡提供了一个反向调用图表，聚合了相同的调用堆栈。也就是说，收集相同的调用序列的相同方法被收集并表示为火焰图中的一个较长的栏(而不是将它们显示为多个更短的条，如调用图所示)。这样就更容易看出哪些方法消耗的时间最多。然而，这也意味着横轴不再表示时间轴，相反，它表示每个方法执行的相对时间。</p><p>为了帮助说明这个概念，考虑下面图4中的调用图表。注意，方法D对B(B1、B2和B3)进行多次调用，其中一些调用B对C(C1和C3)进行调用。</p><p><img src="images/call_chart_2-2X.png" alt="image"></p><p>因为B1、B2和B3共享相同的序列调用者(A→D→B)聚合,如下所示。同样,C1和C3聚合,因为它们共享相同的序列调用者(A→D→B→C)注意不包括C2,因为它有不同的调用者序列(A→D→C)。</p><p><img src="images/flame_chart_aggregation-2X.png" alt="image"></p><p>聚合方法调用用于创建flame 图，如下图所示。注意，对于任何给定的方法调用，在flame图中，消耗最多CPU时间的callees首先出现。<br><img src="images/flame_chart-2X.png" alt="image"></p><h4 id="1-3-3-使用自上而下和自下而上检查"><a href="#1-3-3-使用自上而下和自下而上检查" class="headerlink" title="1.3.3 使用自上而下和自下而上检查"></a><strong>1.3.3 使用自上而下和自下而上检查</strong></h4><p>Top Down选项卡显示方法调用的列表，扩展方法节点显示其callees。下图显示了上面的图3中调用图的顶部向下图。图中的每个箭头都是从调用者到callee。</p><p>下图所示，在顶部的down选项卡中扩展方法A的节点将显示它的callees、方法B和D。在此之后，扩展方法D的节点将暴露它的callees、方法B和C，等等。与火焰图选项卡类似，顶部向下的树聚合跟踪信息，用于共享相同调用堆栈的相同方法。也就是说，火焰图标签提供了顶部下标签的图形表示。</p><p>Top Down选项卡提供以下信息，以帮助描述在每个方法调用上花费的CPU时间(在选定的时间段内，时间也代表线程总时间的百分比):</p><ul><li>Self:方法调用用于执行自己的代码而不是它的callees的时间量，如上面的图3所示。</li><li>Children：方法调用花费的时间用于执行其被调用者，而不是其自己的代码，如图3中的方法D所示。</li><li>Total：方法的Self和Children的时间的总和。这表示应用程序执行方法调用的总时间量，如图3所示的方法D。<br>  <img src="images/top_down_tree-2X.png" alt="image"></li></ul><p>Bottom Up选项卡显示一个方法调用列表，扩展方法的节点显示其调用者。使用上图所示的例子中,下图提供了一个自下而上方法C .在自下而上的树中打开方法C的节点，显示每个独特的调用者,方法B和d .注意,虽然B两次调用C,B当扩大节点只出现一次自下而上方法C的树。再此之后，展开节点B显示其调用者方法A和D.</p><p><img src="images/bottom_up_tree-2X.png" alt="image"></p><p>Bottom Up选项卡对于那些消耗最多(或最少)CPU时间的方法的排序方法很有用。您可以检查每个节点，以确定哪些调用者在调用这些方法上花费最多的CPU时间。与上面的树相比，底部树中每个方法的定时信息都是在每棵树的顶部(顶部节点)的方法。在记录期间，CPU时间也被表示为线程总时间的百分比。下表有助于解释如何解释顶级节点及其调用方方法(子节点)的定时信息。</p><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">Self</th><th style="text-align:left">Children</th><th style="text-align:left">Total</th></tr></thead><tbody><tr><td style="text-align:left">自下而上树顶部的方法（顶层节点）</td><td style="text-align:left">表示用于执行其自己的代码而不是其callees的方法的总时间。与上面的树相比，这个时间信息表示在记录期间对该方法的所有调用的总和。</td><td style="text-align:left">表示用于执行callees而不是自己的代码的总时间。与上面的树相比，这个时间信息表示在记录期间对该方法的callees调用的所有调用的总和。</td><td style="text-align:left">Self时间和Children的时间总和</td></tr><tr><td style="text-align:left">Caller 方法 (子节点)</td><td style="text-align:left">表示调用者调用callee的总时间。使用上图中的底向上树作为例子，方法B的自我时间将等于每个方法C调用时的Self时间的总和。</td><td style="text-align:left">表示调用者调用的callee的总子时间。在上图中使用底部向上的树为例，方法B的孩子时间将等于每个方法C调用时执行方法C的总和。</td><td style="text-align:left">Self时间和Children的时间总和</td></tr></tbody></table><blockquote><p>对于给定的记录，当profiler达到文件大小限制时，Android Studio停止收集新数据(但是这并没有停止记录)。这种情况在执行检测跟踪时通常会发生得更快，因为这种类型的跟踪会在较短的时间内收集更多的数据，而不是取样跟踪。如果将检查时间帧扩展到在到达限制后发生的记录期间，那么跟踪窗格中的计时数据不会发生变化(因为没有可用的新数据)。此外，当您只选择没有可用数据的记录的部分时，跟踪窗格将显示NaN用于计时信息。</p></blockquote><h2 id="二、-内存分析器memory-profiler"><a href="#二、-内存分析器memory-profiler" class="headerlink" title="二、 内存分析器memory profiler"></a><strong>二、 内存分析器memory profiler</strong></h2><p>内存分析器是Android Profiler中的一个组件，它可以帮助您识别内存泄漏和内存溢出，从而导致存根、冻结甚至应用程序崩溃。它显示了应用程序内存使用的实时图，让您捕获堆转储、强制垃圾收集和跟踪内存分配。</p><p>要打开内存分析器和cpu检查器一样，就在隔壁。</p><h3 id="2-1-为什么使用内存分析器"><a href="#2-1-为什么使用内存分析器" class="headerlink" title="2.1 为什么使用内存分析器"></a><strong>2.1 为什么使用内存分析器</strong></h3><p>Android提供了一个托管内存环境——当它确定你的应用不再使用某些对象时，垃圾收集器会将未使用的内存释放回堆。在所有Android版本的某个点上，系统必须短暂地暂停代码。大多数时候，停顿是不可察觉的。但是，如果你的应用程序分配内存的速度快于系统收集的速度，你的应用程序可能会被延迟，而收集器释放了足够的内存来满足你的分配。延迟可能会导致应用程序跳过帧并导致明显的慢速。</p><p>即使你的应用程序没有表现出缓慢，如果它泄露了内存，它仍然可以保留那个内存，即使它在后台。通过强制不必要的垃圾收集事件，这种行为可以降低系统内存性能的其他部分。最终，系统不得不杀死你的应用程序来回收内存。然后当用户返回到你的应用程序时，它必须重新启动。</p><p>为了帮助防止这些问题，您应该使用内存分析器来执行以下操作：</p><ul><li>在可能导致性能问题的时间轴中寻找不良的内存分配模式</li><li>Dump Java堆，以便在任何时间查看哪些对象正在使用内存。长时间的堆转储可以帮助识别内存泄漏。</li><li>在正常和极端的用户交互过程中记录内存分配，以精确地确定您的代码在短时间内分配的对象或分配被泄漏的对象。</li></ul><p>有关可以减少应用程序内存使用的编程实践的信息，请参阅<a href="https://developer.android.google.cn/topic/performance/memory.html" target="_blank" rel="noopener">管理应用程序的内存</a>。</p><h3 id="2-2-内存分析器概述"><a href="#2-2-内存分析器概述" class="headerlink" title="2.2 内存分析器概述"></a><strong>2.2 内存分析器概述</strong></h3><p><img src="images/memory-profiler-callouts_2x.png" alt="image"></p><p>如上图所示，内存分析器的默认视图包括以下内容：</p><ul><li>① 强制执行垃圾收集事件的按钮。</li><li>② 捕获堆转储的按钮。</li><li>③ 记录内存分配的按钮。</li><li>④ 放大时间线的按钮。</li><li>⑤ 跳转到实时内存数据的按钮。</li><li>⑥ 事件时间线显示活动状态、用户输入事件和屏幕旋转事件。</li><li><p>⑦ 内存使用时间表，其中包括以下内容： </p><ul><li>每个内存类别使用多少内存的堆栈图，如左边的y轴和顶部的颜色键所示。</li><li>虚线表示已分配对象的数量，如右侧y轴所示。</li><li>每个垃圾收集事件的图标。</li></ul></li></ul><p>但是，默认情况下并不是所有的分析数据都可见。如果您看到一条消息，说“高级分析不可用于所选进程”，则需要启用高级分析以查看以下内容：</p><ul><li>活动时间表</li><li>分配对象的数量</li><li>垃圾收集事件</li></ul><blockquote><p>提示： 与之前的Android监控工具相比，新的内存分析器记录了你的内存使用情况，所以看起来你的内存使用量会更高。内存分析器监视一些额外的类别，这些类别增加了总数，但如果您只关心Java堆内存，那么“Java”的数字应该与上一个Android监视器的值类似。新的号码记录了从Zygote分派到应用程序的Java堆中的所有物理内存页面，这准确表示您的应用程序实际使用多少物理内存。</p></blockquote><h3 id="2-3-记录内存分配"><a href="#2-3-记录内存分配" class="headerlink" title="2.3 记录内存分配"></a><strong>2.3 记录内存分配</strong></h3><p>查看堆转储时，查看分配了多少内存的快照很有用，它不会显示如何分配内存。为此，您需要记录内存分配。完成记录会话后，您可以看到以下记录的持续时间：</p><ul><li>分配了哪些对象以及它们使用了多少空间。</li><li>在堆栈跟踪中分配每个对象的位置，其中包括线程。</li></ul><p><img src="images/memory-profiler-allocations_2x.png" alt="image"></p><p>要查看应用程序的内存分配，请单击内存分析器工具栏中的<code>Record memory allocations</code>。当它记录时，与你的应用程序进行交互，以引起内存溢出或内存泄漏。完成后，单击<code>Stop recording</code>。</p><p>分配的对象列表出现在时间轴下面，按类名称分组，按堆计数排序，如上图所示。</p><blockquote><p>分配跟踪器最多记录65535个分配。如果您的记录超出此限制，则只有最近65535个分配将保存在该记录中。</p></blockquote><p>要检查分配记录，请按照下列步骤操作：</p><ul><li>浏览列表以查找具有非常大的堆计数且可能泄漏的对象，要帮助查找已知类，请单击类名列标题按字母顺序排序。然后单击一个类名，Instance View 窗格就会显示在右侧，显示该类的每个实例，如下图所示。</li><li>在<code>Instance View</code>窗格中，单击一个实例。<code>Call Stack</code>选项卡显示在下面，显示了哪个实例被分配在哪个线程中。</li><li>在<code>Call Stack</code>选项卡中，单击任意行可以在编辑器中跳转到该代码。</li></ul><p><img src="images/memory-profiler-allocations-detail_2x.png" alt="image"></p><p>默认情况下，列表是按类名排列的。在列表的顶部，您可以使用右下拉菜单在列表之间切换:</p><ul><li>Arrange by class： 根据类名分配。</li><li>Arrange by package：根据包名分配。</li><li>Arrange by callstack: 根据调用堆栈排序</li></ul><h3 id="2-4-捕获堆转储"><a href="#2-4-捕获堆转储" class="headerlink" title="2.4 捕获堆转储"></a><strong>2.4 捕获堆转储</strong></h3><p>堆转储显示在捕获堆转储时应用程序正在使用内存的对象。特别是在扩展用户会话之后，堆转储可以通过显示仍然在内存中的对象来帮助识别内存泄漏。捕获堆转储后，可以查看以下内容:</p><ul><li>您的应用程序分配了哪些类型的对象，以及每个对象的数量。</li><li>每个对象使用多少内存</li><li>每个对象的引用被保留在你的代码中。</li><li>调用堆栈，用于分配对象的位置（只有在记录分配时捕获堆转储）。</li></ul><p><img src="images/memory-profiler-dump_2x.png" alt="图4"></p><p>要捕获堆转储，单击Memory-Profiler工具栏中的dump Java堆<img src="images/profiler-heap-dump.png" alt="image">。在转储堆时，Java内存的数量可能会暂时增加。这是正常的，因为堆转储发生在与应用程序相同的进程中，需要一些内存来收集数据。</p><p>堆转储出现在内存时间轴下方，显示堆中的所有类类型，如上图所示。</p><p>要检查你的堆，请按照下列步骤操作：</p><ul><li>浏览列表以查找具有异常大堆计数的对象，因为它可能会被泄露。为了帮助查找已知类，请单击类名列标题以按字母顺序排序。然后单击类名。实例视图窗格出现在右边，显示该类的每个实例，如下图所示。</li><li>在<code>Instance View</code>窗格中，单击一个实例。 <code>References</code>选项卡显示在下面，显示对该对象的所有引用。或者单击实例名称旁边的箭头以查看其所有字段，然后单击字段名称以查看其所有引用。如果要查看某个字段的实例详细信息，请右键单击该字段，然后选择<code>Go to Instance</code>。</li><li>在<code>References</code>选项卡中，如果识别可能是内存泄漏的引用，请右键单击它，然后选择<code>Go to Instance.</code>。这将从堆转储中选择相应的实例，显示您自己的实例数据。</li></ul><p>默认情况下，堆转储不会显示每个已分配对象的堆栈跟踪。要获取堆栈跟踪，您必须在单击转储Java堆之前开始记录内存分配。如果您这样做，您可以在实例视图中选择一个实例，并在References选项卡旁边看到Call Stack选项卡，如下图所示。但是，在开始记录分配之前，可能已经分配了一些对象，因此这些对象无法使用调用堆栈。包含一个调用堆栈的实例在图标上有一个<code>stack</code>标记<img src="images/memory-profiler-icon-stack.png" alt="image">。</p><p><img src="images/memory-profiler-dump-stacktrace_2x.png" alt="image"></p><p>在classes列表中，您可以看到以下信息：</p><ul><li>Heap Count: 堆中的实例数。</li><li>Shallow Size: 此堆中所有实例的总大小（以字节为单位）。</li><li>Retained Size: 这个类的所有实例(以字节为单位)保留的内存总大小。</li></ul><p>在类列表的顶部，可以使用左下拉列表在以下堆转储之间切换:</p><ul><li>Default heap: 当系统没有指定堆时。</li><li>App heap: 应用程序分配内存的主堆。</li><li>Image heap: 系统引导映像，包含在引导期间预加载的类。这里的分配保证永远不会移动或离开。</li><li>Zygote heap: Android系统中分发应用程序进程的写时复制堆</li></ul><p>默认情况下，列表按保留大小列排序。您可以单击任何列标题来更改列表的排序方式。</p><p>在Instance View中，每个实例包括以下内容：</p><ul><li>Depth：从任何GC根到所选实例的跳数最短。</li><li>Shallow Size：此实例的大小。</li><li>Retained Size：此实例支配的内存大小（根据支配者树)。</li></ul><h2 id="三、-网络分析器-Network-Profiler"><a href="#三、-网络分析器-Network-Profiler" class="headerlink" title="三、 网络分析器(Network Profiler)"></a><strong>三、 网络分析器(Network Profiler)</strong></h2><p>网络分析器在时间轴上显示实时网络活动，显示发送和接收的数据，以及当前连接的数量。这让您可以检查应用程序如何和何时传输数据，并适当地优化底层代码。</p><p>打开面板的步骤和上面的几乎一致。</p><h3 id="3-1-为什么要使用网络分析器"><a href="#3-1-为什么要使用网络分析器" class="headerlink" title="3.1 为什么要使用网络分析器"></a><strong>3.1 为什么要使用网络分析器</strong></h3><p>当应用程序向网络发出请求时，设备必须使用耗电的移动或WiFi无线电来发送和接收数据包。接收器不仅使用电力传输数据，而且还使用额外的电源打开和保持唤醒。</p><p>使用网络分析器，您可以查找频繁的、短的网络活动高峰，这意味着您的应用程序要求网络经常打开，或者长时间保持唤醒，以处理许多短的请求。这一模式表明，您可以通过批处理网络请求来优化应用程序，以改善电池性能，从而减少网络必须打开或接收数据的次数。这也使得网络可以切换到低功率模式，以节省电池的时间间隔。</p><p>有关优化应用程序网络活动的技术的更多信息，请参阅 <a href="https://developer.android.google.cn/topic/performance/power/network/index.html" target="_blank" rel="noopener">Reducing Network Battery Drain</a>。</p><h3 id="3-2-网络分析器概述"><a href="#3-2-网络分析器概述" class="headerlink" title="3.2 网络分析器概述"></a><strong>3.2 网络分析器概述</strong></h3><p>在窗口的顶部，您可以看到事件时间线和①无线电电源状态(high/low)和wi-fi。在时间轴上，您可以单击和拖动来选择②时间轴的一部分来检查流量。下面的③窗口显示在时间轴的选定部分中发送和接收的文件，包括文件名、大小、类型、状态和时间。您可以通过单击任何列标题来对列表进行排序。您还可以看到时间线所选部分的详细分解，显示每个文件被发送或接收的时间。</p><p>单击连接的名称，查看所选文件发送或接收的详细信息。单击④选项卡查看响应数据、头信息或调用堆栈。</p><p><img src="images/networkprofiler_2x.png" alt="image"></p><blockquote><p>提示：您必须启用高级概要分析来选择时间轴的一部分来检查，查看发送和接收的文件的列表，或者查看所选文件发送或接收的详细信息。为了启用高级分析，请查看上一篇文章</p></blockquote><h3 id="3-3-网络连接疑难解答"><a href="#3-3-网络连接疑难解答" class="headerlink" title="3.3 网络连接疑难解答"></a><strong>3.3 网络连接疑难解答</strong></h3><p>如果网络分析器检测到流量值，但无法识别任何支持的网络请求。您将收到以下错误消息：”Network Profiling Data Unavailable: There is no information for the network traffic you’ve selected.”</p><p>目前，网络分析器只支持HttpURLConnection和OkHttp库。如果您的应用程序使用另一个网络连接库，那么您可能无法在网络分析器中查看您的网络活动。如果您已经收到了这个错误消息，但是您的应用程序确实使用HttpURLConnection或OkHttp，请报告错误，以便我们可以调查这个问题。</p><p>转载：<a href="http://blog.csdn.net/niubitianping/article/details/72617864" target="_blank" rel="noopener">http://blog.csdn.net/niubitianping/article/details/72617864</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android-Profiler分为三大模块：-cpu、内存-、网络。基本的使用在上一篇文章有讲到。这里详细说一下&quot;&gt;&lt;a href=&quot;#Android-Profiler分为三大模块：-cpu、内存-、网络。基本的使用在上一篇文章有讲到。这里详细说一下&quot; clas
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/uncategorized/2019/02/24/VersionControl/git%20gui%20tower%20compare%20tow%20commit%20diff2019-02-24/"/>
    <id>http://yoursite.com/uncategorized/2019/02/24/VersionControl/git gui tower compare tow commit diff2019-02-24/</id>
    <published>2019-02-24T03:38:39.466Z</published>
    <updated>2019-02-24T04:46:19.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tower"><a href="#Tower" class="headerlink" title="Tower"></a>Tower</h1><p>Comparing Branches &amp; Revisions</p><p>Sometimes, you’ll want to know how two branches (or even two arbitrary revisions) differ in detail. In any case, please make sure you have configured your favorite external diff tool in Tower’s preferences window.</p><h2 id="Comparing-Branches"><a href="#Comparing-Branches" class="headerlink" title="Comparing Branches"></a>Comparing Branches</h2><p>选择两个brache 然后右击<br><img src="media/15509805398349.jpg" alt=""></p><h2 id="Comparing-Revisions-compare-commits"><a href="#Comparing-Revisions-compare-commits" class="headerlink" title="Comparing Revisions (compare commits)"></a>Comparing Revisions (compare commits)</h2><ul><li><p><strong>select both commits</strong> you want to compare and click the <strong>Diff</strong> button on the right.<br><img src="media/15509796466816.jpg" alt=""><br>选择两个要需要比较的 commit 然后点击右侧的 <code>compare</code>。<br>参考：<a href="https://www.git-tower.com/help/mac/commit-history/compare-branches-revisions" target="_blank" rel="noopener">https://www.git-tower.com/help/mac/commit-history/compare-branches-revisions</a></p></li><li><p><strong>right-click</strong> a commit and select <strong>Compare  with Revision…</strong>. In the following dialog, you can then enter the commit hash of the other commit.<br><img src="media/15509802487091.jpg" alt=""></p></li></ul><p>把需要比较的 version 的 <code>commit hash</code> 粘贴到 <code>To Revision</code>框中。<br><img src="media/15509802126897.jpg" alt=""></p><p>git 和 svn 不同 没有版本号的概念，通过 <code>commit hash</code>区分不同的 version。</p><h1 id="SorceTree"><a href="#SorceTree" class="headerlink" title="SorceTree"></a>SorceTree</h1><p>Use ⌘ (OSX) or CTRL (Windows and Linux) and choose any two commits you like in log view. It does not matter what branch the commits belong to.</p><p>As a result you will see something like…</p><blockquote><p>Displaying all changes between f03a18bf0370c62bb5fb5c6350589ad8def13aea and 4a4b176b852e7c8e83fffe94ea263042c59f0548</p></blockquote><p>…down below.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Tower&quot;&gt;&lt;a href=&quot;#Tower&quot; class=&quot;headerlink&quot; title=&quot;Tower&quot;&gt;&lt;/a&gt;Tower&lt;/h1&gt;&lt;p&gt;Comparing Branches &amp;amp; Revisions&lt;/p&gt;
&lt;p&gt;Sometimes, you’l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/uncategorized/2019/02/20/Android/android%20view2019-02-20/"/>
    <id>http://yoursite.com/uncategorized/2019/02/20/Android/android view2019-02-20/</id>
    <published>2019-02-20T12:44:50.548Z</published>
    <updated>2019-02-20T13:08:52.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="android-View"><a href="#android-View" class="headerlink" title="android View"></a>android View</h1><p>dip是Density independent pixel的缩写，也就是独立的像素密度的意思，dip是基于屏幕密度的抽象单位，与设备无关，用于说明与密度无关的尺寸和位置。它是相对于一个160dpi的屏幕来说的，因此1dip对应160dpi屏幕上的1px。</p><p>dip指的是一种独立像素的表示方式，它的计算是在dpi的基础之上的，也就是说，我们只有在知道dpi是多少之后，才能够根据不同的dpi，来精确计算我们需要的dip。</p><p>dpi是一种密度单位，是dot per inch的缩写，也就是每英寸多少个像素点的意思。比如说，我们有一个480*800分辨率的手机，屏幕的物理尺寸是3英寸*5英寸，那么我们就可以计算出这个手机的是480/3＝160dpi，是属于低分辨率的，那么在这种分辨率下面，     </p><blockquote><ul><li>px（像素）</li><li>1dip(dp) = 1/160 in(英寸) 固定</li><li>1dpi = 1 px/in  （像素/英寸， 即一英寸上的像素个数，就是像素密度） </li><li>160dpi = 160/1 （px/in) (一英寸上有160个像素点)</li></ul></blockquote><p>   此时1dip 相当于多少个像素？也就是问1/160英寸上有多少个像素点，<br>   1dip = 1/160  <em> 160 = 1px;<br>   也就是说，当我们在这种分辨率的手机下，控件的宽度和长度就和设计图一样大小就可以，一个dip对应一个px。但是，如果还是相同的分辨率，换成了2英寸x3.3英寸呢？那么我们就可以先算出手机的密度是480/2=240dpi，是属于高分辨率的，那么在这种分辨率下面，一个dip就相当多少个像素点？<br>    1dpi =  1/160 </em> 240  = 1.5 px ,即1/160英寸 乘以 每英寸上有240个像素点，就是1.5px.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;android-View&quot;&gt;&lt;a href=&quot;#android-View&quot; class=&quot;headerlink&quot; title=&quot;android View&quot;&gt;&lt;/a&gt;android View&lt;/h1&gt;&lt;p&gt;dip是Density independent pixel的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/uncategorized/2019/02/14/Android/RxJava%E7%9B%B8%E5%85%B3%E5%8D%9A%E6%96%872019-02-14/"/>
    <id>http://yoursite.com/uncategorized/2019/02/14/Android/RxJava相关博文2019-02-14/</id>
    <published>2019-02-14T13:06:10.111Z</published>
    <updated>2019-02-14T13:08:20.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RxJava-相关博文"><a href="#RxJava-相关博文" class="headerlink" title="RxJava 相关博文"></a>RxJava 相关博文</h1><ul><li><a href="https://www.cnkirito.moe/comparing-rxjava/" target="_blank" rel="noopener">八个层面比较 Java 8, RxJava, Reactor</a>  Backpressure 翻译为<code>回压</code>更准确，更容易理解。</li><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RxJava-相关博文&quot;&gt;&lt;a href=&quot;#RxJava-相关博文&quot; class=&quot;headerlink&quot; title=&quot;RxJava 相关博文&quot;&gt;&lt;/a&gt;RxJava 相关博文&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnkirit
      
    
    </summary>
    
    
  </entry>
  
</feed>

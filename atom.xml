<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Seachal的Blogs</title>
  
  <subtitle>记录学习的技能和遇到的问题</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://seachal.me/"/>
  <updated>2019-02-13T13:10:32.441Z</updated>
  <id>https://seachal.me/</id>
  
  <author>
    <name>Seachal</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://seachal.me/uncategorized/2019/02/13/Android/addTextChangedListener%E7%9A%84%E4%B8%89%E4%B8%AA%E6%96%B9%E6%B3%952019-02-13/"/>
    <id>https://seachal.me/uncategorized/2019/02/13/Android/addTextChangedListener的三个方法2019-02-13/</id>
    <published>2019-02-13T12:56:28.272Z</published>
    <updated>2019-02-13T13:10:32.441Z</updated>
    
    <content type="html"><![CDATA[<h1 id="addTextChangedListener的三个方法"><a href="#addTextChangedListener的三个方法" class="headerlink" title="addTextChangedListener的三个方法"></a>addTextChangedListener的三个方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mEtPassword.addTextChangedListener(<span class="keyword">new</span> TextWatcher() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> count, <span class="keyword">int</span> after)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//s:变化前的所有字符； start:字符开始的位置； count:；after:变化后的字节数</span></span><br><span class="line">                Log.i(<span class="string">"Seachal:"</span>, <span class="string">"beforeTextChanged:s="</span> + s + <span class="string">";"</span> + <span class="string">"start:"</span> + start + <span class="string">";"</span> + <span class="string">"count:"</span> + count + <span class="string">";"</span> + <span class="string">"after:"</span> + after);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> before, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//S：变化后的所有字符；start：字符起始的位置；before: ；count:变化后的字节数</span></span><br><span class="line">                Log.i(<span class="string">"Seachal:"</span>, <span class="string">"onTextChanged:s="</span> + s + <span class="string">";"</span> + <span class="string">"start:"</span> + start + <span class="string">";"</span> + <span class="string">"before:"</span> + before + <span class="string">";"</span> + <span class="string">"count:"</span> + count);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTextChanged</span><span class="params">(Editable s)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//s:变化后的所有字符</span></span><br><span class="line">                Log.i(<span class="string">"Seachal:"</span>, <span class="string">"afterTextChanged:s="</span> + s + <span class="string">";=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span>);</span><br></pre></td></tr></table></figure><p>1.从未输入任何字符开始输入 <code>test</code> log的变化</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">I/<span class="string">Seachal:</span>: <span class="string">beforeTextChanged:</span>s=;<span class="string">start:</span><span class="number">0</span>;<span class="string">count:</span><span class="number">0</span>;<span class="string">after:</span><span class="number">1</span></span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">onTextChanged:</span>s=t;<span class="string">start:</span><span class="number">0</span>;<span class="string">before:</span><span class="number">0</span>;<span class="string">count:</span><span class="number">1</span></span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">afterTextChanged:</span>s=t;=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">beforeTextChanged:</span>s=t;<span class="string">start:</span><span class="number">1</span>;<span class="string">count:</span><span class="number">0</span>;<span class="string">after:</span><span class="number">1</span></span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">onTextChanged:</span>s=te;<span class="string">start:</span><span class="number">1</span>;<span class="string">before:</span><span class="number">0</span>;<span class="string">count:</span><span class="number">1</span></span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">afterTextChanged:</span>s=te;=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">beforeTextChanged:</span>s=te;<span class="string">start:</span><span class="number">2</span>;<span class="string">count:</span><span class="number">0</span>;<span class="string">after:</span><span class="number">1</span></span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">onTextChanged:</span>s=tes;<span class="string">start:</span><span class="number">2</span>;<span class="string">before:</span><span class="number">0</span>;<span class="string">count:</span><span class="number">1</span></span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">afterTextChanged:</span>s=tes;=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">beforeTextChanged:</span>s=tes;<span class="string">start:</span><span class="number">3</span>;<span class="string">count:</span><span class="number">0</span>;<span class="string">after:</span><span class="number">1</span></span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">onTextChanged:</span>s=test;<span class="string">start:</span><span class="number">3</span>;<span class="string">before:</span><span class="number">0</span>;<span class="string">count:</span><span class="number">1</span></span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">afterTextChanged:</span>s=test;=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>2.在 <code>test</code> 基础上增加字符<code>23</code>看变化</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">I/<span class="string">Seachal:</span>: <span class="string">beforeTextChanged:</span>s=test;<span class="string">start:</span><span class="number">4</span>;<span class="string">count:</span><span class="number">0</span>;<span class="string">after:</span><span class="number">1</span></span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">onTextChanged:</span>s=test2;<span class="string">start:</span><span class="number">4</span>;<span class="string">before:</span><span class="number">0</span>;<span class="string">count:</span><span class="number">1</span></span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">afterTextChanged:</span>s=test2;=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">beforeTextChanged:</span>s=test2;<span class="string">start:</span><span class="number">5</span>;<span class="string">count:</span><span class="number">0</span>;<span class="string">after:</span><span class="number">1</span></span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">onTextChanged:</span>s=test23;<span class="string">start:</span><span class="number">5</span>;<span class="string">before:</span><span class="number">0</span>;<span class="string">count:</span><span class="number">1</span></span><br><span class="line">I/<span class="string">Seachal:</span>: <span class="string">afterTextChanged:</span>s=test23;=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>3.在<code>test23</code>基础上删除<code>23</code>看变化</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">beforeTextChanged:</span>s=test23;<span class="string">start:</span><span class="number">5</span>;<span class="string">count:</span><span class="number">1</span>;<span class="string">after:</span><span class="number">0</span></span><br><span class="line"><span class="string">onTextChanged:</span>s=test2;<span class="string">start:</span><span class="number">5</span>;<span class="string">before:</span><span class="number">1</span>;<span class="string">count:</span><span class="number">0</span></span><br><span class="line"><span class="string">afterTextChanged:</span>s=test2;=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line"><span class="string">beforeTextChanged:</span>s=test2;<span class="string">start:</span><span class="number">4</span>;<span class="string">count:</span><span class="number">1</span>;<span class="string">after:</span><span class="number">0</span></span><br><span class="line"><span class="string">onTextChanged:</span>s=test;<span class="string">start:</span><span class="number">4</span>;<span class="string">before:</span><span class="number">1</span>;<span class="string">count:</span><span class="number">0</span></span><br><span class="line"><span class="string">afterTextChanged:</span>s=test;=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>4.在<code>test</code>基础上三处<code>st</code>并立即输入<code>45</code>看变化</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">beforeTextChanged:</span>s=test;<span class="string">start:</span><span class="number">3</span>;<span class="string">count:</span><span class="number">1</span>;<span class="string">after:</span><span class="number">0</span></span><br><span class="line"><span class="string">onTextChanged:</span>s=tes;<span class="string">start:</span><span class="number">3</span>;<span class="string">before:</span><span class="number">1</span>;<span class="string">count:</span><span class="number">0</span></span><br><span class="line"><span class="string">afterTextChanged:</span>s=tes;=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line"><span class="string">beforeTextChanged:</span>s=tes;<span class="string">start:</span><span class="number">2</span>;<span class="string">count:</span><span class="number">1</span>;<span class="string">after:</span><span class="number">0</span></span><br><span class="line"><span class="string">onTextChanged:</span>s=te;<span class="string">start:</span><span class="number">2</span>;<span class="string">before:</span><span class="number">1</span>;<span class="string">count:</span><span class="number">0</span></span><br><span class="line"><span class="string">afterTextChanged:</span>s=te;=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line"><span class="string">beforeTextChanged:</span>s=te;<span class="string">start:</span><span class="number">2</span>;<span class="string">count:</span><span class="number">0</span>;<span class="string">after:</span><span class="number">1</span></span><br><span class="line"><span class="string">onTextChanged:</span>s=te4;<span class="string">start:</span><span class="number">2</span>;<span class="string">before:</span><span class="number">0</span>;<span class="string">count:</span><span class="number">1</span></span><br><span class="line"><span class="string">afterTextChanged:</span>s=te4;=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br><span class="line"><span class="string">beforeTextChanged:</span>s=te4;<span class="string">start:</span><span class="number">3</span>;<span class="string">count:</span><span class="number">0</span>;<span class="string">after:</span><span class="number">1</span></span><br><span class="line"><span class="string">onTextChanged:</span>s=te45;<span class="string">start:</span><span class="number">3</span>;<span class="string">before:</span><span class="number">0</span>;<span class="string">count:</span><span class="number">1</span></span><br><span class="line"><span class="string">afterTextChanged:</span>s=te45;=&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;addTextChangedListener的三个方法&quot;&gt;&lt;a href=&quot;#addTextChangedListener的三个方法&quot; class=&quot;headerlink&quot; title=&quot;addTextChangedListener的三个方法&quot;&gt;&lt;/a&gt;addTe
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://seachal.me/uncategorized/2019/02/13/Android/Android%20Error2019-02-13/"/>
    <id>https://seachal.me/uncategorized/2019/02/13/Android/Android Error2019-02-13/</id>
    <published>2019-02-13T12:09:26.480Z</published>
    <updated>2019-02-13T12:09:26.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-Error"><a href="#Android-Error" class="headerlink" title="Android Error"></a>Android Error</h1><h1 id="Android-androidx"><a href="#Android-androidx" class="headerlink" title="Android  androidx"></a>Android  androidx</h1><p>今天使用rxlifecycle时，遇到<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Manifest merger failed : Attribute application@appComponentFactory value=(android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.app</span><span class="selector-class">.CoreComponentFactory</span>) from [com<span class="selector-class">.android</span><span class="selector-class">.support</span>:support-compat:<span class="number">28.0</span>.<span class="number">0</span>-alpha3] AndroidManifest<span class="selector-class">.xml</span>:<span class="number">22</span>:<span class="number">18</span>-<span class="number">91</span></span><br><span class="line">    is also present at [androidx<span class="selector-class">.core</span>:core:<span class="number">1.0</span>.<span class="number">0</span>-alpha3] AndroidManifest<span class="selector-class">.xml</span>:<span class="number">22</span>:<span class="number">18</span>-<span class="number">86</span> value=(androidx<span class="selector-class">.core</span><span class="selector-class">.app</span><span class="selector-class">.CoreComponentFactory</span>).</span><br><span class="line">    Suggestion: add <span class="string">'tools:replace="android:appComponentFactory"'</span> to &lt;application&gt; element at AndroidManifest<span class="selector-class">.xml</span>:<span class="number">5</span>:<span class="number">5</span>-<span class="number">19</span>:<span class="number">19</span> to override.</span><br></pre></td></tr></table></figure></p><p>查看 com.trello.rxlifecycle3的releases信息</p><blockquote><p><a href="https://github.com/trello/RxLifecycle/releases/tag/v3.0.0" target="_blank" rel="noopener">V3.0.0</a><br><a href="https://github.com/dlew" target="_blank" rel="noopener"></a> <a href="https://github.com/dlew" target="_blank" rel="noopener">dlew</a> 发布了这个 on 26 Oct 2018 · 自本次发布以来，有<a href="https://github.com/trello/RxLifecycle/compare/v3.0.0...master" target="_blank" rel="noopener"> 4次提交</a>要掌握</p><ul><li><a href="https://github.com/trello/RxLifecycle/pull/285" target="_blank" rel="noopener">＃285</a>：更新了com.trello.rxlifecycle3的基础包</li><li><a href="https://github.com/trello/RxLifecycle/pull/284" target="_blank" rel="noopener">＃284</a>：弃用rxlifecycle-navi</li><li><a href="https://github.com/trello/RxLifecycle/pull/283" target="_blank" rel="noopener">＃283</a>：升级到AndroidX</li></ul></blockquote><p>==原因是== 从v28开始, android的support库将会进行改进, 28.0.0将会是support库的终结版本. 未来新的特性和改进都会进入Androidx包。所以 ==support和Androidx冲突了==，</p><p>解决方案</p><ul><li>整个项目完全升级到 androidx， android studio 提供了一个按钮<code>Migrate to Androidx</code>，可以迁移到Androidx,前提是使用android 28</li><li>退而求其次，使用低版本的RxLifecycle（没有升级到升级到AndroidX的）<br>因为项目时间紧急，所以我暂时选择使用低版本的RxLifecycle。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android-Error&quot;&gt;&lt;a href=&quot;#Android-Error&quot; class=&quot;headerlink&quot; title=&quot;Android Error&quot;&gt;&lt;/a&gt;Android Error&lt;/h1&gt;&lt;h1 id=&quot;Android-androidx&quot;&gt;&lt;a 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://seachal.me/uncategorized/2019/02/12/IOS%E5%BC%80%E5%8F%912019-02-12/"/>
    <id>https://seachal.me/uncategorized/2019/02/12/IOS开发2019-02-12/</id>
    <published>2019-02-12T12:41:39.388Z</published>
    <updated>2019-02-12T12:41:39.388Z</updated>
    
    <content type="html"><![CDATA[<p># </p><h2 id="更新Pod"><a href="#更新Pod" class="headerlink" title="更新Pod"></a>更新Pod</h2><p><img src="media/15499455667434.jpg" alt="-w756"></p><p>ZBarSDK 没用pod传上去<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span>  ios项目路径</span><br><span class="line">pod <span class="keyword">update</span></span><br></pre></td></tr></table></figure></p><p> 样例<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">bogon:future-terminal-ios ctitc$ pod <span class="keyword">update</span></span><br><span class="line"><span class="keyword">Update</span> all pods</span><br><span class="line">Updating <span class="keyword">local</span> specs repositories</span><br><span class="line">  $ /usr/<span class="keyword">bin</span>/git -C /<span class="keyword">Users</span>/ctitc/.cocoapods/repos/<span class="keyword">master</span> <span class="keyword">fetch</span> origin <span class="comment">--progress</span></span><br><span class="line">  remote: Enumerating objects: <span class="number">63096</span>, done.        </span><br><span class="line">  remote: Counting objects: <span class="number">100</span>% (<span class="number">63096</span>/<span class="number">63096</span>), done.        </span><br><span class="line">  remote: Compressing objects: <span class="number">100</span>% (<span class="number">30</span>/<span class="number">30</span>), done.        </span><br><span class="line">  <span class="keyword">error</span>: RPC <span class="keyword">failed</span>; curl 18 transfer closed with outstanding read data remaining</span><br><span class="line">  fatal: The remote <span class="keyword">end</span> hung up unexpectedly</span><br><span class="line">  fatal: early EOF</span><br><span class="line">  fatal: <span class="keyword">index</span>-pack <span class="keyword">failed</span></span><br><span class="line">[!] CocoaPods was <span class="keyword">not</span> able <span class="keyword">to</span> <span class="keyword">update</span> the <span class="string">`master`</span> repo. <span class="keyword">If</span> this <span class="keyword">is</span> an unexpected issue <span class="keyword">and</span> persists you can inspect it running <span class="string">`pod repo update --verbose`</span></span><br><span class="line">bogon:future-terminal-ios ctitc$ pod <span class="keyword">update</span></span><br><span class="line"><span class="keyword">Update</span> all pods</span><br><span class="line">Updating <span class="keyword">local</span> specs repositories</span><br><span class="line">  $ /usr/<span class="keyword">bin</span>/git -C /<span class="keyword">Users</span>/ctitc/.cocoapods/repos/<span class="keyword">master</span> <span class="keyword">fetch</span> origin <span class="comment">--progress</span></span><br><span class="line">  remote: Enumerating objects: <span class="number">63096</span>, done.        </span><br><span class="line">  remote: Counting objects: <span class="number">100</span>% (<span class="number">63096</span>/<span class="number">63096</span>), done.        </span><br><span class="line">  remote: Compressing objects: <span class="number">100</span>% (<span class="number">30</span>/<span class="number">30</span>), done.        </span><br><span class="line">  remote: Total <span class="number">244951</span> (delta <span class="number">63068</span>), reused <span class="number">63079</span> (delta <span class="number">63065</span>), pack-reused <span class="number">181855</span>        </span><br><span class="line">  Receiving objects: <span class="number">100</span>% (<span class="number">244951</span>/<span class="number">244951</span>), <span class="number">27.45</span> MiB | <span class="number">134.00</span> KiB/s, done.</span><br><span class="line">  Resolving deltas: <span class="number">100</span>% (<span class="number">166785</span>/<span class="number">166785</span>), completed <span class="keyword">with</span> <span class="number">8472</span> <span class="keyword">local</span> objects.</span><br><span class="line">  <span class="keyword">From</span> https://github.com/CocoaPods/Specs</span><br><span class="line">     <span class="number">0</span>d0a66f88d7.<span class="number">.9</span>d245ec95f3  <span class="keyword">master</span>      -&gt; origin/<span class="keyword">master</span></span><br><span class="line">   * [<span class="keyword">new</span> branch]              cdn_scripts -&gt; origin/cdn_scripts</span><br><span class="line">  $ /usr/<span class="keyword">bin</span>/git -C /<span class="keyword">Users</span>/ctitc/.cocoapods/repos/<span class="keyword">master</span> rev-<span class="keyword">parse</span> <span class="comment">--abbrev-ref</span></span><br><span class="line">  <span class="keyword">HEAD</span></span><br><span class="line">  <span class="keyword">master</span></span><br><span class="line">  $ /usr/<span class="keyword">bin</span>/git -C /<span class="keyword">Users</span>/ctitc/.cocoapods/repos/<span class="keyword">master</span> <span class="keyword">reset</span> <span class="comment">--hard</span></span><br><span class="line">  origin/<span class="keyword">master</span></span><br></pre></td></tr></table></figure></p><p>参考：<a href="https://www.jianshu.com/p/97189e71efd9" target="_blank" rel="noopener">https://www.jianshu.com/p/97189e71efd9</a></p><p>如果pod install/update 后clean 还无法解决，那么点击A<br>future-terminal-ios.Xcworkspace文件打开再run一下试试</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;# &lt;/p&gt;
&lt;h2 id=&quot;更新Pod&quot;&gt;&lt;a href=&quot;#更新Pod&quot; class=&quot;headerlink&quot; title=&quot;更新Pod&quot;&gt;&lt;/a&gt;更新Pod&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;media/15499455667434.jpg&quot; alt=&quot;-w756&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://seachal.me/uncategorized/2019/02/12/Android/RxJava-2019-01-24/"/>
    <id>https://seachal.me/uncategorized/2019/02/12/Android/RxJava-2019-01-24/</id>
    <published>2019-02-12T12:41:39.342Z</published>
    <updated>2019-02-12T12:41:39.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RxJava"><a href="#RxJava" class="headerlink" title="RxJava"></a>RxJava</h1><h2 id="RxJava-错误操作"><a href="#RxJava-错误操作" class="headerlink" title="RxJava 错误操作"></a>RxJava 错误操作</h2><h3 id="onErrorReturn"><a href="#onErrorReturn" class="headerlink" title="onErrorReturn"></a>onErrorReturn</h3><p>在错误处结束，不会执行onError</p><h3 id="onErrorResumeNext"><a href="#onErrorResumeNext" class="headerlink" title="onErrorResumeNext"></a>onErrorResumeNext</h3><p>在错误处继续新的 Observable，不会执行onError</p><h3 id="onExceptionResumeNext"><a href="#onExceptionResumeNext" class="headerlink" title="onExceptionResumeNext"></a>onExceptionResumeNext</h3><p>如果捕捉到的异常是 Exception对象，则效果和onErrorResumeNext一样，如果捕捉到的不是Exception对象，则onExceptionResumeNext不会起任何作用，相当于没有添加次操作符。</p><h3 id="retry"><a href="#retry" class="headerlink" title="retry"></a>retry</h3><p>retry重试几次，</p><h3 id="retryWhen"><a href="#retryWhen" class="headerlink" title="retryWhen"></a>retryWhen</h3><p>retryWhen </p><h2 id="Transformers简介"><a href="#Transformers简介" class="headerlink" title="Transformers简介"></a>Transformers简介</h2><p>聪明的同学可能已经意识到了这个问题，但是RxJava早已提供了一种解决方案：<a href="http://reactivex.io/RxJava/javadoc/rx/Observable.Transformer.html" target="_blank" rel="noopener">Transformer</a>（译者注：有转换器意思），一般情况下可以通过使用操作符<a href="http://reactivex.io/RxJava/javadoc/rx/Observable.html#compose(rx.Observable.Transformer" target="_blank" rel="noopener">Observable.compose()</a>)来实现。</p><ul><li>compose<br><code>.compose(new HandleErrTransformer())</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** project  RxEasyHttp</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;描述：错误转换Transformer&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * 作者： zhouyou&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 日期： 2017/5/15 17:09 &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 版本： v1.0&lt;br&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandleErrTransformer</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">ObservableTransformer</span>&lt;<span class="title">T</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObservableSource&lt;T&gt; <span class="title">apply</span><span class="params">(@NonNull Observable&lt;T&gt; upstream)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upstream.onErrorResumeNext(<span class="keyword">new</span> HttpResponseFunc&lt;T&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;描述：异常转换处理&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * 作者： zhouyou&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 日期： 2017/5/15 16:55 &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 版本： v1.0&lt;br&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpResponseFunc</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Function</span>&lt;<span class="title">Throwable</span>, <span class="title">Observable</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;T&gt; <span class="title">apply</span><span class="params">(@NonNull Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Observable.error(ApiException.handleException(throwable));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>map<br>`   .map(new ResultParseInterceptor<string>())  </string></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultParseInterceptor</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Func1</span>&lt;<span class="title">Result</span>&lt;<span class="title">T</span>&gt;, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">call</span><span class="params">(Result&lt;T&gt; httpResult)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (httpResult == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//    seachal annotation       正常情况下，httpResult 可能是空数据 new Result（），但不应该是null,所以这种操作是合理的。</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServerException(<span class="number">404</span>, <span class="string">"获取结构为空"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (httpResult.state != <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServerException(httpResult.state, httpResult.error);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> httpResult.infos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>flatmap</li></ul><ul><li>map 和  flatmap 和 compose</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">github XSnow</span><br><span class="line">ApiPostRequest.java</span><br><span class="line"> <span class="keyword">return</span> apiService.postForm(suffixUrl, forms)</span><br><span class="line">                    .map(<span class="keyword">new</span> ApiResultFunc&lt;T&gt;(type))</span><br><span class="line">                    .compose(<span class="keyword">this</span>.&lt;T&gt;apiTransformer());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">map</span><br><span class="line"><span class="meta">@SchedulerSupport</span>(SchedulerSupport.NONE)</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">final</span> &lt;R&gt; <span class="function">Observable&lt;R&gt; <span class="title">map</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends R&gt; mapper)</span> </span>&#123;</span><br><span class="line">     ObjectHelper.requireNonNull(mapper, <span class="string">"mapper is null"</span>);</span><br><span class="line">     <span class="keyword">return</span> RxJavaPlugins.onAssembly(<span class="keyword">new</span> ObservableMap&lt;T, R&gt;(<span class="keyword">this</span>, mapper));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SchedulerSupport</span>(SchedulerSupport.NONE)</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> &lt;R&gt; <span class="function">Observable&lt;R&gt; <span class="title">compose</span><span class="params">(ObservableTransformer&lt;T, R&gt; composer)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> wrap(composer.apply(<span class="keyword">this</span>));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flatMap</span><br><span class="line"><span class="meta">@SchedulerSupport</span>(SchedulerSupport.NONE)</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">final</span> &lt;R&gt; <span class="function">Observable&lt;R&gt; <span class="title">flatMap</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends ObservableSource&lt;? extends R&gt;&gt; mapper)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> flatMap(mapper, <span class="keyword">false</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>==其实从上面的代码是看不出使用区别的==</p><ul><li>代码参考的github RxJavaDemo</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Observable&lt;String&gt; <span class="title">flatMapObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">            .flatMap(<span class="keyword">new</span> Func1&lt;Integer, Observable&lt;String&gt;&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> Observable.just(<span class="string">"flat map:"</span> + integer);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Observable&lt;Integer&gt; <span class="title">mapObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">               .map(<span class="keyword">new</span> Func1&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">                   <span class="meta">@Override</span></span><br><span class="line">                   <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                       <span class="keyword">return</span> integer * <span class="number">10</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>区别在于 call()方法的return类型（返回类型)不同。</p><p>再看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Observable&lt;String&gt; <span class="title">composeObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Transformer&lt;Integer, String&gt; myTransformer =</span><br><span class="line">            <span class="keyword">new</span> Transformer&lt;Integer, String&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">call</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                        Observable&lt;Integer&gt; integerObservable)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> integerObservable</span><br><span class="line">                            .map(integer -&gt; <span class="string">"myTransforer:"</span> + integer)</span><br><span class="line">                            .doOnNext(s -&gt; log(<span class="string">"doOnNext:"</span> + s));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">    <span class="keyword">return</span> Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).compose(myTransformer);</span><br></pre></td></tr></table></figure><p>返回类型是 Observable，所以compose和flatMap有一定的可比性，和map没有可比性,所以网上才会有这样一篇博文：<br><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0819/3327.html" target="_blank" rel="noopener">不要打断链式结构：使用 RxJava的 compose() 操作符</a>讲解了compose 和 flatMap的区别</p><p>下面是转载的原文部分内容：</p><h2 id="flatMap-操作符怎么样？"><a href="#flatMap-操作符怎么样？" class="headerlink" title="flatMap()操作符怎么样？"></a>flatMap()操作符怎么样？</h2><p>现在你可能会好奇，compose()操作符和flatMap()操作符有何区别。他们最终都会发送出Observable，这就意味着，两者都能够用于操作符的重用？</p><p>不同点在于compose()操作符拥有更高层次的抽象概念：它操作于整个数据流中，不仅仅是某一个被发送的事件。具体如下：</p><ol><li><p>compose()是唯一一个能够从数据流中得到原始Observable的操作符，所以，那些需要对整个数据流产生作用的操作（比如，subscribeOn()和observeOn()）需要使用compose()来实现。相较而言，如果在flatMap()中使用subscribeOn()或者observeOn()，那么它仅仅对在flatMap()中创建的Observable起作用，而不会对剩下的流产生影响（译者注：==深坑==，会在后面的系列着重讲解，欢迎关注）。</p></li><li><p>当创建Observable流的时候，compose()会立即执行，犹如已经提前写好了一个操作符一样，而flatMap()则是在onNext()被调用后执行，onNext()的每一次调用都会触发flatMap()，也就是说，flatMap()转换每一个事件，而compose()转换的是整个数据流。</p></li><li><p>因为每一次调用onNext()后，都不得不新建一个Observable，所以flatMap()的效率较低。事实上，compose()操作符只在主干数据流上执行操作。</p></li></ol><p>如果想重用一些操作符，还是使用compose()吧，虽然flatMap()的用处很多，但作为重用代码这一点来讲，并不适用。</p><h2 id="do"><a href="#do" class="headerlink" title="do"></a>do</h2><ul><li>doOnNext是先于onNext执行的</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RxJava&quot;&gt;&lt;a href=&quot;#RxJava&quot; class=&quot;headerlink&quot; title=&quot;RxJava&quot;&gt;&lt;/a&gt;RxJava&lt;/h1&gt;&lt;h2 id=&quot;RxJava-错误操作&quot;&gt;&lt;a href=&quot;#RxJava-错误操作&quot; class=&quot;header
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://seachal.me/uncategorized/2019/02/12/Android/Android%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%862019-02-12/"/>
    <id>https://seachal.me/uncategorized/2019/02/12/Android/Android基础知识2019-02-12/</id>
    <published>2019-02-12T12:41:39.341Z</published>
    <updated>2019-02-12T12:41:39.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android基础知识"><a href="#Android基础知识" class="headerlink" title="Android基础知识"></a>Android基础知识</h1><h2 id="tools-listitem-预览RecyclerView加入Item-Layout后的效果"><a href="#tools-listitem-预览RecyclerView加入Item-Layout后的效果" class="headerlink" title="tools:listitem 预览RecyclerView加入Item Layout后的效果"></a>tools:listitem 预览RecyclerView加入Item Layout后的效果</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">                                        <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">                                        <span class="attr">android:id</span>=<span class="string">"@+id/rv_content"</span></span></span><br><span class="line"><span class="tag">                                        <span class="attr">style</span>=<span class="string">"@style/MatchMatch"</span></span></span><br><span class="line"><span class="tag">                                        <span class="attr">android:background</span>=<span class="string">"#ccc"</span></span></span><br><span class="line"><span class="tag">                                        <span class="attr">android:scrollbars</span>=<span class="string">"none"</span></span></span><br><span class="line"><span class="tag">                                        <span class="attr">tools:listitem</span>=<span class="string">"@layout/item_normal"</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android基础知识&quot;&gt;&lt;a href=&quot;#Android基础知识&quot; class=&quot;headerlink&quot; title=&quot;Android基础知识&quot;&gt;&lt;/a&gt;Android基础知识&lt;/h1&gt;&lt;h2 id=&quot;tools-listitem-预览RecyclerView
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://seachal.me/uncategorized/2019/02/12/Android/RxJava%20-2019-02-11/"/>
    <id>https://seachal.me/uncategorized/2019/02/12/Android/RxJava -2019-02-11/</id>
    <published>2019-02-12T12:41:39.341Z</published>
    <updated>2019-02-12T13:54:20.167Z</updated>
    
    <content type="html"><![CDATA[<p># </p><h2 id="rxjavaSample-分析"><a href="#rxjavaSample-分析" class="headerlink" title="rxjavaSample 分析"></a>rxjavaSample 分析</h2><p>1<br><img src="media/15498737180203.jpg" alt="-w1153"></p><p>2<br><img src="media/15498737763613.jpg" alt="-w1130"></p><p>3<br><img src="media/15498738031813.jpg" alt="-w1140"></p><p>4<br><img src="media/15498738207632.jpg" alt="-w1162"><br>5<br><img src="media/15498738525920.jpg" alt="-w1160"><br>6<br><img src="media/15498738729000.jpg" alt="-w1126"><br>7<br><img src="media/15498739072470.jpg" alt="-w1161"><br>8<br><img src="media/15498739333102.jpg" alt="-w1144"><br>9<br><img src="media/15498739520597.jpg" alt="-w1113"><br>10.<br><img src="media/15498739781947.jpg" alt="-w1115"></p><h2 id="RxJavaDemo-分析"><a href="#RxJavaDemo-分析" class="headerlink" title="RxJavaDemo 分析"></a>RxJavaDemo 分析</h2><p>源码： <a href="https://github.com/GAndroidProject/RxJavaDemo/blob/master/app/src/main/java/cn/com/chaoba/rxjavademo/errorhandling/RetryActivity.java" target="_blank" rel="noopener">https://github.com/GAndroidProject/RxJavaDemo/blob/master/app/src/main/java/cn/com/chaoba/rxjavademo/errorhandling/RetryActivity.java</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> Observable&lt;Integer&gt; <span class="title">retryWhenObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//      遇到错误就执行retryWhen，所以最后重试的次数由 zip 中的just中的个数确定。</span></span><br><span class="line">        <span class="keyword">return</span> createObserver().</span><br><span class="line">                retryWhen(</span><br><span class="line">                        <span class="keyword">new</span> Func1&lt;Observable&lt;? extends Throwable&gt;, Observable&lt;?&gt;&gt;() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="keyword">public</span> Observable&lt;?&gt; call(Observable&lt;? extends Throwable&gt; observable) &#123;</span><br><span class="line">                                <span class="keyword">return</span> observable.zipWith(Observable.just(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>),</span><br><span class="line">                                        <span class="keyword">new</span> Func2&lt;Throwable, Integer, String&gt;() &#123;</span><br><span class="line">                                            <span class="meta">@Override</span></span><br><span class="line">                                            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Throwable throwable, Integer integer)</span> </span>&#123;</span><br><span class="line">                                                <span class="comment">//                    速度太快看不出来一次一次执行</span></span><br><span class="line">                                                <span class="comment">//   log(throwable.getMessage() + integer);</span></span><br><span class="line">                                                <span class="comment">// 把"#Exception#" 字符串和 just（）依次发射出的值拼接</span></span><br><span class="line">                                                <span class="keyword">return</span> throwable.getMessage() + integer;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;)</span><br><span class="line">                                        .flatMap(<span class="keyword">new</span> Func1&lt;String, Observable&lt;String&gt;&gt;() &#123;</span><br><span class="line">                                            <span class="meta">@Override</span></span><br><span class="line">                                            <span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                                                <span class="keyword">return</span> createObserver1()</span><br><span class="line">                                                        .subscribeOn(Schedulers.io())</span><br><span class="line">                                                        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                                                        .doOnCompleted(<span class="keyword">new</span> Action0() &#123;</span><br><span class="line">                                                            <span class="meta">@Override</span></span><br><span class="line">                                                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                                                Log.i(<span class="string">"ErrorInterceptor:"</span>, <span class="string">"doOnCompleted"</span>);</span><br><span class="line">                                                            &#125;</span><br><span class="line">                                                        &#125;)</span><br><span class="line"><span class="comment">//                                                      会被执行</span></span><br><span class="line">                                                        .doOnError(<span class="keyword">new</span> Action1&lt;Throwable&gt;() &#123;</span><br><span class="line">                                                            <span class="meta">@Override</span></span><br><span class="line">                                                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">                                                                Log.i(<span class="string">"ErrorInterceptor:"</span>, <span class="string">"doOnError"</span>);</span><br><span class="line">                                                            &#125;</span><br><span class="line">                                                        &#125;)</span><br><span class="line">                                                        .doOnNext(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">                                                            <span class="meta">@Override</span></span><br><span class="line">                                                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                                                                Log.i(<span class="string">"ErrorInterceptor:"</span>, <span class="string">"doOnNext"</span>);</span><br><span class="line">                                                            &#125;</span><br><span class="line">                                                        &#125;);</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;)</span><br><span class="line">                                        .flatMap(<span class="keyword">new</span> Func1&lt;String, Observable&lt;Long&gt;&gt;() &#123;</span><br><span class="line">                                            <span class="meta">@Override</span></span><br><span class="line">                                            <span class="function"><span class="keyword">public</span> Observable&lt;Long&gt; <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                                                <span class="comment">//    把zip中拼接的异常输出。</span></span><br><span class="line">                                                log(s);</span><br><span class="line">                                                <span class="comment">//   返回一个Observable，计时执行，</span></span><br><span class="line">                                                <span class="keyword">return</span> Observable.timer(<span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">                                                <span class="comment">//  return Observable.just( 1L);</span></span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line"><span class="comment">//                .onErrorResumeNext();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Observable&lt;Integer&gt; <span class="title">createObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Integer&gt; subscriber)</span> </span>&#123;</span><br><span class="line">                log(<span class="string">"subscribe"</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">                        subscriber.onError(<span class="keyword">new</span> Exception(<span class="string">"#Exception#"</span>));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        subscriber.onNext(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Observable&lt;String&gt; <span class="title">createObserver1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</span><br><span class="line">                log(<span class="string">"subscribe"</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">                        subscriber.onError(<span class="keyword">new</span> Exception(<span class="string">"#Exception#"</span>));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        subscriber.onNext(i + <span class="string">""</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>createObserver1()会发出错误，注意后面有个1， createObserver1在retryWhen的 flatMap里面，createObserver1出现错误是会执行 flatMap 的doOnError的，<br>发现日志：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">02</span>-<span class="number">11</span> <span class="number">14</span>:<span class="number">42</span>:<span class="number">21.988</span> <span class="number">27196</span>-<span class="number">27196</span>/cn<span class="selector-class">.com</span><span class="selector-class">.chaoba</span><span class="selector-class">.rxjavademo</span> I/ErrorInterceptor:: doOnError</span><br></pre></td></tr></table></figure></p><p>发现执行结构，<br><img src="media/15499792719477.jpg" alt="-w430"><br>==日志和屏幕说明了==，retryWhen也是按照普通正常的onNext()-onCompleted()、onNext()-onError(),顺序执行，</p><ul><li>如果没有报错执行， 依次执行onNext()(可能多个)、onCompleted(),</li><li>如果报错了，依次执行onNext()(可能多个,可能0个)、onError()。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;# &lt;/p&gt;
&lt;h2 id=&quot;rxjavaSample-分析&quot;&gt;&lt;a href=&quot;#rxjavaSample-分析&quot; class=&quot;headerlink&quot; title=&quot;rxjavaSample 分析&quot;&gt;&lt;/a&gt;rxjavaSample 分析&lt;/h2&gt;&lt;p&gt;1&lt;br&gt;&lt;im
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://seachal.me/uncategorized/2019/02/11/Android/TextInputLayout-2019-01-15/"/>
    <id>https://seachal.me/uncategorized/2019/02/11/Android/TextInputLayout-2019-01-15/</id>
    <published>2019-02-11T13:11:20.621Z</published>
    <updated>2019-02-11T13:11:20.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TextInputLayout"><a href="#TextInputLayout" class="headerlink" title="TextInputLayout"></a>TextInputLayout</h1><a href="!--参考https://blog.csdn.net/android_freshman/article/details/51136657。https://juejin.im/post/587c1637128fe10057f745db--">!--参考https://blog.csdn.net/android_freshman/article/details/51136657。https://juejin.im/post/587c1637128fe10057f745db--</a><p>搜索关键字：<code>TextInputLayout 自定义</code><br>因为TextInputLayout有一条默认的theme，所以如果想改变就要自定义</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;TextInputLayout&quot;&gt;&lt;a href=&quot;#TextInputLayout&quot; class=&quot;headerlink&quot; title=&quot;TextInputLayout&quot;&gt;&lt;/a&gt;TextInputLayout&lt;/h1&gt;&lt;a href=&quot;!--参考
https:
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://seachal.me/uncategorized/2019/02/11/Java/images/Java2019-02-01/"/>
    <id>https://seachal.me/uncategorized/2019/02/11/Java/images/Java2019-02-01/</id>
    <published>2019-02-11T13:11:20.621Z</published>
    <updated>2019-02-11T13:11:20.621Z</updated>
    
    <content type="html"><![CDATA[<p># </p><h2 id="转码"><a href="#转码" class="headerlink" title="转码"></a>转码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Double.parseDouble() ;              Double.valueOf();</span><br></pre></td></tr></table></figure><p>看源码后就会发现，Double.valueOf其实底层还是用的 Double.parseDouble() ;      </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;# &lt;/p&gt;
&lt;h2 id=&quot;转码&quot;&gt;&lt;a href=&quot;#转码&quot; class=&quot;headerlink&quot; title=&quot;转码&quot;&gt;&lt;/a&gt;转码&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://seachal.me/uncategorized/2019/02/10/Visual%20Studio%20Code%E8%AE%BE%E7%BD%AE%E4%B8%AD%E6%96%87-2019-02-10/"/>
    <id>https://seachal.me/uncategorized/2019/02/10/Visual Studio Code设置中文-2019-02-10/</id>
    <published>2019-02-10T08:55:34.200Z</published>
    <updated>2019-02-10T08:58:52.128Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Visual-Studio-Code设置中文"><a href="#Visual-Studio-Code设置中文" class="headerlink" title="Visual Studio Code设置中文"></a>Visual Studio Code设置中文</h1><h2 id="一、VS-Code-升级新版版后，默认仅仅支持英文"><a href="#一、VS-Code-升级新版版后，默认仅仅支持英文" class="headerlink" title="一、VS Code 升级新版版后，默认仅仅支持英文"></a>一、VS Code 升级新版版后，默认仅仅支持英文</h2><p>想在vs code中使用中文语言，可以在线下载语言包进行配置。 补充说明：目前版本，搜索下载插件，重新启动的话，点击右下角的OK，可以自动添加配置内容<br>配置步骤： </p><ol><li>下载语言包 插件 输入“Chinese” ，安装插件 “Chinese (Simplified) Language Pack for Visual Studio Code” </li><li>Ctrl +Shift +P快捷键 输入 “Configure  Language” 配置本地语言  将local的值，设置为中文简体“zh-CN” ,当你删除之前的语言设置，在“locale”后面输入冒号或引号时会提示可用的选项。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Visual-Studio-Code设置中文&quot;&gt;&lt;a href=&quot;#Visual-Studio-Code设置中文&quot; class=&quot;headerlink&quot; title=&quot;Visual Studio Code设置中文&quot;&gt;&lt;/a&gt;Visual Studio Code设置
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://seachal.me/uncategorized/2019/02/10/VersionControl/Git%20%E5%A4%B4%E5%83%8F%E4%BF%AE%E6%94%B9-2019-02-10/"/>
    <id>https://seachal.me/uncategorized/2019/02/10/VersionControl/Git 头像修改-2019-02-10/</id>
    <published>2019-02-10T08:27:56.230Z</published>
    <updated>2019-02-10T08:44:43.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-头像修改"><a href="#Git-头像修改" class="headerlink" title="Git 头像修改"></a>Git 头像修改</h1><p>平时使用git gui工具，如 tower、sourtree 时发现 git 账号的头像不是自己 github 的头像（当然提供 git 托管服务的网站有多个，如 gitlab，）或者是空白，所以就搜索一下找到了解决方法。</p><ol><li><p>第一种是直接在你当前托管的git服务网站中自定义上传头像</p></li><li><p>第二种通过第三方网站修改，基本上所有git服务网站都遵循这点，下面说的就是该模式</p><p> 其实很简单！！！</p> <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">https:</span>//<span class="built_in">zh</span>-tw.gravatar.com/</span><br></pre></td></tr></table></figure><p> 复制上门的网址 <code>gravatar.com</code> 网站注册一个账号！</p><p> 使用 <code>git</code> 服务 <code>同名</code> 的邮箱！！！重点，必须和 <code>git</code> 用户邮箱一致！</p><p> 在网站中上传头像，保存成功，稍等片刻！刷新你的git服务网站！！神奇的事情就发生了！！</p><p> 如果有新的<code>git账号</code>头像需求！直接在已有的 <code>gravatar.com</code> 账户中，添加新邮箱地址即可！</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git-头像修改&quot;&gt;&lt;a href=&quot;#Git-头像修改&quot; class=&quot;headerlink&quot; title=&quot;Git 头像修改&quot;&gt;&lt;/a&gt;Git 头像修改&lt;/h1&gt;&lt;p&gt;平时使用git gui工具，如 tower、sourtree 时发现 git 账号的头像不是
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://seachal.me/uncategorized/2019/01/30/github%20cheat%20sheet-2019-01-17/"/>
    <id>https://seachal.me/uncategorized/2019/01/30/github cheat sheet-2019-01-17/</id>
    <published>2019-01-30T12:39:49.814Z</published>
    <updated>2019-01-30T12:39:49.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GitHub’s-search-supports-a-variety-of-different-operations-Here’s-a-quick-cheat-sheet-for-some-of-the-common-searches"><a href="#GitHub’s-search-supports-a-variety-of-different-operations-Here’s-a-quick-cheat-sheet-for-some-of-the-common-searches" class="headerlink" title="GitHub’s search supports a variety of different operations. Here’s a quick cheat sheet for some of the common searches."></a>GitHub’s search supports a variety of different operations. Here’s a quick cheat sheet for some of the common searches.</h1><p>For more information, visit our <a href="https://help.github.com/articles/about-searching-on-github/" target="_blank" rel="noopener">search help section</a>.</p><h2 id="Basic-search"><a href="#Basic-search" class="headerlink" title="Basic search"></a>Basic search</h2><table><thead><tr><th>This search</th><th>Finds repositories with…</th></tr></thead><tbody><tr><td>cat stars:&gt;100</td><td>Find cat repositories with greater than 100 stars.</td></tr><tr><td>user:defunkt</td><td>Get all repositories from the user defunkt.</td></tr><tr><td>tom location:”San Francisco, CA”</td><td>Find all tom users in “San Francisco, CA”.</td></tr><tr><td>join extension:coffee</td><td>Find all instances of join in code with coffee extension.</td></tr><tr><td>NOT cat</td><td>Excludes all results containing cat.</td></tr></tbody></table><hr><h2 id="Repository-search"><a href="#Repository-search" class="headerlink" title="Repository search "></a>Repository search <a href="https://help.github.com/articles/searching-repositories" target="_blank" rel="noopener"></a></h2><p>Repository search looks through the projects you have access to on GitHub. You can also filter the results:</p><table><thead><tr><th>This search</th><th>Finds repositories with…</th></tr></thead><tbody><tr><td>cat stars:&gt;100</td><td>Find cat repositories with greater than 100 stars.</td></tr><tr><td>user:defunkt</td><td>Get all repositories from the user defunkt.</td></tr><tr><td>pugs pushed:&gt;2013-01-28</td><td>Pugs repositories pushed to since Jan 28, 2013.</td></tr><tr><td>node.js forks: <a href="https://help.github.com/articles/searching-code" target="_blank" rel="noopener"></a></td></tr></tbody></table><p>Code search looks through the files hosted on GitHub. You can also filter the results:</p><table><thead><tr><th>This search</th><th>Finds repositories with…</th></tr></thead><tbody><tr><td>install repo:charles/privaterepo</td><td>Find all instances of install in code from the repository charles/privaterepo.</td></tr><tr><td>shogun user:heroku</td><td>Find references to shogun from all public heroku repositories.</td></tr><tr><td>join extension:coffee</td><td>Find all instances of join in code with coffee extension.</td></tr><tr><td>system size:&gt;1000</td><td>Find all instances of system in code of file size greater than 1000kbs.</td></tr><tr><td>examples path:/docs/</td><td>Find all examples in the path /docs/.</td></tr><tr><td>replace fork:true</td><td>Search replace in the source code of forks.</td></tr></tbody></table><hr><h2 id="Issue-search"><a href="#Issue-search" class="headerlink" title="Issue search "></a>Issue search <a href="https://help.github.com/articles/searching-issues" target="_blank" rel="noopener"></a></h2><p>Issue search looks through issues and pull requests on GitHub. You can also filter the results:</p><table><thead><tr><th>This search</th><th>Finds issues…</th></tr></thead><tbody><tr><td>encoding user:heroku</td><td>Encoding issues across the Heroku organization.</td></tr><tr><td>cat is:open</td><td>Find cat issues that are open.</td></tr><tr><td>strange comments:&gt;42</td><td>Issues with more than 42 comments.</td></tr><tr><td>hard label:bug</td><td>Hard issues labeled as a bug.</td></tr><tr><td>author:mojombo</td><td>All issues authored by mojombo.</td></tr><tr><td>mentions:tpope</td><td>All issues mentioning tpope.</td></tr><tr><td>assignee:rtomayko</td><td>All issues assigned to rtomayko.</td></tr><tr><td>exception created:&gt;2012-12-31</td><td>Created since the beginning of 2013.</td></tr><tr><td>exception updated: <a href="https://help.github.com/articles/searching-users" target="_blank" rel="noopener"></a></td></tr></tbody></table><p>User search finds users with an account on GitHub. You can also filter the results:</p><table><thead><tr><th>This search</th><th>Finds repositories with…</th></tr></thead><tbody><tr><td>fullname:”Linus Torvalds”</td><td>Find users with the full name “Linus Torvalds”.</td></tr><tr><td>tom location:”San Francisco, CA”</td><td>Find all tom users in “San Francisco, CA”.</td></tr><tr><td>chris followers:100..200</td><td>Find all chris users with followers between 100 and 200.</td></tr><tr><td>ryan repos:&gt;10</td><td>Find all ryan users with more than 10 repositories.</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;GitHub’s-search-supports-a-variety-of-different-operations-Here’s-a-quick-cheat-sheet-for-some-of-the-common-searches&quot;&gt;&lt;a href=&quot;#Git
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://seachal.me/uncategorized/2019/01/30/Android/%E5%9C%A8%E8%BF%90%E8%A1%8C%E6%97%B6%E8%AF%B7%E6%B1%82%E6%9D%83%E9%99%90-2019-01-15/"/>
    <id>https://seachal.me/uncategorized/2019/01/30/Android/在运行时请求权限-2019-01-15/</id>
    <published>2019-01-30T12:39:49.814Z</published>
    <updated>2019-01-30T12:39:49.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在运行时请求权限"><a href="#在运行时请求权限" class="headerlink" title="在运行时请求权限"></a>在运行时请求权限</h1><p>转载自：<a href="https://developer.android.com/training/permissions/requesting?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.com/training/permissions/requesting?hl=zh-cn</a></p><h1 id="在运行时请求权限-1"><a href="#在运行时请求权限-1" class="headerlink" title="在运行时请求权限"></a>在运行时请求权限</h1><p>从 Android 6.0（API 级别 23）开始，用户开始在应用运行时向其授予权限，而不是在应用安装时授予。此方法可以简化应用安装过程，因为用户在安装或更新应用时不需要授予权限。它还让用户可以对应用的功能进行更多控制；例如，用户可以选择为相机应用提供相机访问权限，而不提供设备位置的访问权限。用户可以随时进入应用的“Settings”屏幕调用权限。</p><p>系统权限分为两类：<em>正常权限</em>和<em>危险权限</em>：</p><ul><li>正常权限不会直接给用户隐私权带来风险。如果您的应用在其清单中列出了正常权限，系统将自动授予该权限。</li><li>危险权限会授予应用访问用户机密数据的权限。如果您的应用在其清单中列出了正常权限，系统将自动授予该权限。如果您列出了危险权限，则用户必须明确批准您的应用使用这些权限。</li></ul><p>如需了解详细信息，请参阅<a href="https://developer.android.com/guide/topics/security/permissions.html?hl=zh-cn#normal-dangerous" target="_blank" rel="noopener">正常权限和危险权限</a>。</p><p>在所有版本的 Android 中，您的应用都需要在其应用清单中同时声明它需要的正常权限和危险权限，如<a href="https://developer.android.com/training/permissions/declaring.html?hl=zh-cn" target="_blank" rel="noopener">声明权限</a>中所述。不过，该声明的<em>影响</em>因系统版本和应用的目标 SDK 级别的不同而有所差异：</p><ul><li>如果设备运行的是 Android 5.1 或更低版本，<strong>或者</strong>应用的目标 SDK 为 22 或更低：如果您在清单中列出了危险权限，则用户必须在安装应用时授予此权限；如果他们不授予此权限，系统根本不会安装应用。</li><li>如果设备运行的是 Android 6.0 或更高版本，<strong>或者</strong>应用的目标 SDK 为 23 或更高：应用必须在清单中列出权限，<em>并且</em>它必须在运行时请求其需要的每项危险权限。用户可以授予或拒绝每项权限，且即使用户拒绝权限请求，应用仍可以继续运行有限的功能。</li></ul><p><strong>注</strong>：从 Android 6.0（API 级别 23）开始，用户可以随时从任意应用调用权限，即使应用面向较低的 API 级别也可以调用。无论您的应用面向哪个 API 级别，您都应对应用进行测试，以验证它在缺少需要的权限时行为是否正常。</p><p>本课将介绍如何使用 Android <a href="https://developer.android.com/tools/support-library/index.html?hl=zh-cn" target="_blank" rel="noopener">支持库</a>来检查和请求权限。Android 框架从 Android 6.0（API 级别 23）开始提供类似方法。不过，使用支持库更简单，因为在调用方法前，您的应用不需要检查它在哪个版本的 Android 上运行。</p><h2 id="检查权限"><a href="#检查权限" class="headerlink" title="检查权限"></a>检查权限</h2><p>如果您的应用需要危险权限，则每次执行需要这一权限的操作时您都必须检查自己是否具有该权限。用户始终可以自由调用此权限，因此，即使应用昨天使用了相机，它不能假设自己今天仍具有该权限。</p><p>要检查您是否具有某项权限，请调用 <a href="https://developer.android.com/reference/android/support/v4/content/ContextCompat.html?hl=zh-cn#checkSelfPermission(android.content.Context,%20java.lang.String" target="_blank" rel="noopener">ContextCompat.checkSelfPermission()</a>) 方法。例如，以下代码段显示了如何检查 Activity 是否具有在日历中进行写入的权限：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Assume thisActivity is the current activity</span></span><br><span class="line"><span class="keyword">int</span> permissionCheck =  ContextCompat.checkSelfPermission(thisActivity, Manifest.permission.WRITE_CALENDAR);</span><br></pre></td></tr></table></figure><p>如果应用具有此权限，方法将返回 <a href="https://developer.android.com/reference/android/content/pm/PackageManager.html?hl=zh-cn#PERMISSION_GRANTED" target="_blank" rel="noopener">PackageManager.PERMISSION_GRANTED</a>，并且应用可以继续操作。如果应用不具有此权限，方法将返回 <a href="https://developer.android.com/reference/android/content/pm/PackageManager.html?hl=zh-cn#PERMISSION_DENIED" target="_blank" rel="noopener">PERMISSION_DENIED</a>，且应用必须明确向用户要求权限。</p><h2 id="请求权限"><a href="#请求权限" class="headerlink" title="请求权限"></a>请求权限</h2><p>如果您的应用需要应用清单中列出的危险权限，那么，它必须要求用户授予该权限。Android 为您提供了多种权限请求方式。调用这些方法将显示一个标准的 Android 对话框，不过，您不能对它们进行自定义。</p><h3 id="解释应用为什么需要权限"><a href="#解释应用为什么需要权限" class="headerlink" title="解释应用为什么需要权限"></a>解释应用为什么需要权限</h3><p><img src="media/request_permission_dialog.png" alt=""></p><p><strong>图 1.</strong> 提示用户授予或拒绝权限的系统对话框。</p><p>在某些情况下，您可能需要帮助用户了解您的应用为什么需要某项权限。例如，如果用户启动一个摄影应用，用户对应用要求使用相机的权限可能不会感到吃惊，但用户可能无法理解为什么此应用想要访问用户的位置或联系人。在请求权限之前，不妨为用户提供一个解释。请记住，您不需要通过解释来说服用户；如果您提供太多解释，用户可能发现应用令人失望并将其移除。</p><p>您可以采用的一个方法是仅在用户已拒绝某项权限请求时提供解释。如果用户继续尝试使用需要某项权限的功能，但继续拒绝权限请求，则可能表明用户不理解应用为什么需要此权限才能提供相关功能。对于这种情况，比较好的做法是显示解释。</p><p>为了帮助查找用户可能需要解释的情形，Android 提供了一个实用程序方法，即 <a href="https://developer.android.com/reference/android/support/v4/app/ActivityCompat.html?hl=zh-cn#shouldShowRequestPermissionRationale(android.app.Activity,%20java.lang.String" target="_blank" rel="noopener">shouldShowRequestPermissionRationale()</a>)。如果应用之前请求过此权限但用户拒绝了请求，此方法将返回 <code>true</code>。</p><blockquote><p><strong>注</strong>：如果用户在过去拒绝了权限请求，并在权限请求系统对话框中选择了 <strong>Don’t ask again</strong> 选项，此方法将返回 <code>false</code>。如果设备规范禁止应用具有该权限，此方法也会返回 <code>false</code>。</p></blockquote><h3 id="请求您需要的权限"><a href="#请求您需要的权限" class="headerlink" title="请求您需要的权限"></a>请求您需要的权限</h3><p>如果应用尚无所需的权限，则应用必须调用一个 <strong><a href="https://developer.android.com/reference/android/support/v4/app/ActivityCompat.html?hl=zh-cn#requestPermissions(android.app.Activity,%20java.lang.String[],%20int" target="_blank" rel="noopener">requestPermissions()</a>)</strong> 方法，以请求适当的权限。应用将传递其所需的权限，以及您指定用于识别此权限请求的整型<em>请求代码</em>。此方法异步运行：它会立即返回，并且在用户响应对话框之后，系统会使用结果调用应用的回调方法，将应用传递的相同请求代码传递到 <strong><a href="https://developer.android.com/reference/android/support/v4/app/ActivityCompat.html?hl=zh-cn#requestPermissions(android.app.Activity,%20java.lang.String[],%20int" target="_blank" rel="noopener">requestPermissions()</a>)</strong>。</p><p>以下代码可以检查应用是否具备读取用户联系人的权限，并根据需要请求该权限：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Here, thisActivity is the current activity</span></span><br><span class="line"><span class="keyword">if</span> (ContextCompat.checkSelfPermission(thisActivity,</span><br><span class="line">                Manifest.permission.READ_CONTACTS)</span><br><span class="line">        != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Should we show an explanation?</span></span><br><span class="line">    <span class="keyword">if</span> (ActivityCompat.shouldShowRequestPermissionRationale(thisActivity,</span><br><span class="line">            Manifest.permission.READ_CONTACTS)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Show an expanation to the user *asynchronously* -- don't block</span></span><br><span class="line">        <span class="comment">// this thread waiting for the user's response! After the user</span></span><br><span class="line">        <span class="comment">// sees the explanation, try again to request the permission.</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// No explanation needed, we can request the permission.</span></span><br><span class="line"></span><br><span class="line">        ActivityCompat.requestPermissions(thisActivity,</span><br><span class="line">                <span class="keyword">new</span> String[]&#123;Manifest.permission.READ_CONTACTS&#125;,</span><br><span class="line">                MY_PERMISSIONS_REQUEST_READ_CONTACTS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// MY_PERMISSIONS_REQUEST_READ_CONTACTS is an</span></span><br><span class="line">        <span class="comment">// app-defined int constant. The callback method gets the</span></span><br><span class="line">        <span class="comment">// result of the request.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：当您的应用调用 <a href="https://developer.android.com/reference/android/support/v4/app/ActivityCompat.html?hl=zh-cn#requestPermissions(android.app.Activity,%20java.lang.String[],%20int" target="_blank" rel="noopener">requestPermissions()</a>) 时，系统将向用户显示一个标准对话框。您的应用<em>无法</em>配置或更改此对话框。如果您需要为用户提供任何信息或解释，您应在调用 <a href="https://developer.android.com/reference/android/support/v4/app/ActivityCompat.html?hl=zh-cn#requestPermissions(android.app.Activity,%20java.lang.String[],%20int" target="_blank" rel="noopener">requestPermissions()</a>) 之前进行，如<a href="https://developer.android.com/training/permissions/requesting?hl=zh-cn#explain" target="_blank" rel="noopener">解释应用为什么需要权限</a>中所述。</p><h3 id="处理权限请求响应"><a href="#处理权限请求响应" class="headerlink" title="处理权限请求响应"></a>处理权限请求响应</h3><p>当应用请求权限时，系统将向用户显示一个对话框。当用户响应时，系统将调用应用的 <a href="https://developer.android.com/reference/android/support/v4/app/ActivityCompat.OnRequestPermissionsResultCallback.html?hl=zh-cn#onRequestPermissionsResult(int,%20java.lang.String[],%20int[]" target="_blank" rel="noopener">onRequestPermissionsResult()</a>)方法，向其传递用户响应。您的应用必须替换该方法，以了解是否已获得相应权限。回调会将您传递的相同请求代码传递给 <a href="https://developer.android.com/reference/android/support/v4/app/ActivityCompat.html?hl=zh-cn#requestPermissions(android.app.Activity,%20java.lang.String[],%20int" target="_blank" rel="noopener">requestPermissions()</a>)。例如，如果应用请求 <a href="https://developer.android.com/reference/android/Manifest.permission.html?hl=zh-cn#READ_CONTACTS" target="_blank" rel="noopener">READ_CONTACTS</a> 访问权限，则它可能采用以下回调方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode,</span></span></span><br><span class="line"><span class="function"><span class="params">        String permissions[], <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">        <span class="keyword">case</span> MY_PERMISSIONS_REQUEST_READ_CONTACTS: &#123;</span><br><span class="line">            <span class="comment">// If request is cancelled, the result arrays are empty.</span></span><br><span class="line">            <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span></span><br><span class="line">                &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// permission was granted, yay! Do the</span></span><br><span class="line">                <span class="comment">// contacts-related task you need to do.</span></span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// permission denied, boo! Disable the</span></span><br><span class="line">                <span class="comment">// functionality that depends on this permission.</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// other 'case' lines to check for other</span></span><br><span class="line">        <span class="comment">// permissions this app might request</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>系统显示的对话框说明了您的应用需要访问的<a href="https://developer.android.com/guide/topics/security/permissions.html?hl=zh-cn#perm-groups" target="_blank" rel="noopener">权限组</a>；它不会列出具体权限。例如，如果您请求 <a href="https://developer.android.com/reference/android/Manifest.permission.html?hl=zh-cn#READ_CONTACTS" target="_blank" rel="noopener">READ_CONTACTS</a> 权限，系统对话框只显示您的应用需要访问设备的联系人。用户只需要为每个权限组授予一次权限。如果您的应用请求该组中的任何其他权限（已在您的应用清单中列出），系统将自动授予应用这些权限。当您请求此权限时，系统会调用您的 <a href="https://developer.android.com/reference/android/support/v4/app/ActivityCompat.OnRequestPermissionsResultCallback.html?hl=zh-cn#onRequestPermissionsResult(int,%20java.lang.String[],%20int[]" target="_blank" rel="noopener">onRequestPermissionsResult()</a>) 回调方法，并传递 <a href="https://developer.android.com/reference/android/content/pm/PackageManager.html?hl=zh-cn#PERMISSION_GRANTED" target="_blank" rel="noopener">PERMISSION_GRANTED</a>，如果用户已通过系统对话框明确同意您的权限请求，系统将采用相同方式操作。</p><blockquote><p><strong>注</strong>：您的应用仍需要明确请求其需要的每项权限，即使用户已向应用授予该权限组中的其他权限。此外，权限分组在将来的 Android 版本中可能会发生变化。您的代码不应依赖特定权限属于或不属于相同组这种假设。</p></blockquote><p>例如，假设您在应用清单中列出了 <a href="https://developer.android.com/reference/android/Manifest.permission.html?hl=zh-cn#READ_CONTACTS" target="_blank" rel="noopener">READ_CONTACTS</a> 和 <a href="https://developer.android.com/reference/android/Manifest.permission.html?hl=zh-cn#WRITE_CONTACTS" target="_blank" rel="noopener">WRITE_CONTACTS</a>。如果您请求 <a href="https://developer.android.com/reference/android/Manifest.permission.html?hl=zh-cn#READ_CONTACTS" target="_blank" rel="noopener">READ_CONTACTS</a> 且用户授予了此权限，那么，当您请求 <a href="https://developer.android.com/reference/android/Manifest.permission.html?hl=zh-cn#WRITE_CONTACTS" target="_blank" rel="noopener">WRITE_CONTACTS</a> 时，系统将立即授予您该权限，不会与用户交互。</p><p>如果用户拒绝了某项权限请求，您的应用应采取适当的操作。例如，您的应用可能显示一个对话框，解释它为什么无法执行用户已经请求但需要该权限的操作。</p><p>当系统要求用户授予权限时，用户可以选择指示系统不再要求提供该权限。这种情况下，无论应用在什么时候使用 <a href="https://developer.android.com/reference/android/support/v4/app/ActivityCompat.html?hl=zh-cn#requestPermissions(android.app.Activity,%20java.lang.String[],%20int" target="_blank" rel="noopener">requestPermissions()</a>) 再次要求该权限，系统都会立即拒绝此请求。系统会调用您的 <a href="https://developer.android.com/reference/android/support/v4/app/ActivityCompat.OnRequestPermissionsResultCallback.html?hl=zh-cn#onRequestPermissionsResult(int,%20java.lang.String[],%20int[]" target="_blank" rel="noopener">onRequestPermissionsResult()</a>) 回调方法，并传递 <a href="https://developer.android.com/reference/android/content/pm/PackageManager.html?hl=zh-cn#PERMISSION_DENIED" target="_blank" rel="noopener">PERMISSION_DENIED</a>，如果用户再次明确拒绝了您的请求，系统将采用相同方式操作。这意味着当您调用 <a href="https://developer.android.com/reference/android/support/v4/app/ActivityCompat.html?hl=zh-cn#requestPermissions(android.app.Activity,%20java.lang.String[],%20int" target="_blank" rel="noopener">requestPermissions()</a>) 时，您不能假设已经发生与用户的任何直接交互。</p><p>[</p><p>上一页</p><p>arrow_backOverview](<a href="https://developer.android.com/guide/topics/permissions/overview?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.com/guide/topics/permissions/overview?hl=zh-cn</a>)</p><p>[</p><p>下一页</p><p>arrow_forwardApp permissions best practices](<a href="https://developer.android.com/training/permissions/usage-notes?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.com/training/permissions/usage-notes?hl=zh-cn</a>)</p><p>Content and code samples on this page are subject to the licenses described in the <a href="https://developer.android.com/license" target="_blank" rel="noopener">Content License</a>. Java is a registered trademark of Oracle and/or its affiliates.</p><p>上次更新日期：四月 25, 2018</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在运行时请求权限&quot;&gt;&lt;a href=&quot;#在运行时请求权限&quot; class=&quot;headerlink&quot; title=&quot;在运行时请求权限&quot;&gt;&lt;/a&gt;在运行时请求权限&lt;/h1&gt;&lt;p&gt;转载自：&lt;a href=&quot;https://developer.android.com/tra
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://seachal.me/uncategorized/2019/01/30/Json%E8%A7%A3%E6%9E%902019-01-21/"/>
    <id>https://seachal.me/uncategorized/2019/01/30/Json解析2019-01-21/</id>
    <published>2019-01-30T12:38:56.466Z</published>
    <updated>2019-01-30T12:38:56.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Json-解析"><a href="#Json-解析" class="headerlink" title="Json 解析"></a>Json 解析</h1><p>JSONObject</p><h2 id="Integer解析报错问题"><a href="#Integer解析报错问题" class="headerlink" title="Integer解析报错问题"></a>Integer解析报错问题</h2><h3 id="如果用Objcet接收"><a href="#如果用Objcet接收" class="headerlink" title="如果用Objcet接收"></a>如果用Objcet接收</h3><p>data未解析时的类型是  Integer。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">Object</span>&gt; data;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  获取Map中数据,改为反射方式</span></span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; T getDataByKey(<span class="keyword">String</span> <span class="built_in">key</span>, Class&lt;T&gt; clazz) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">//报错位置</span></span><br><span class="line">          <span class="keyword">JSONObject</span> jsonObject = (<span class="keyword">JSONObject</span>) data.<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">JSONObject</span>.toJavaObject(jsonObject, clazz);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//    return (T) new  Object();</span></span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>报错:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer cannot be cast to com<span class="selector-class">.alibaba</span><span class="selector-class">.fastjson</span><span class="selector-class">.JSONObject</span></span><br></pre></td></tr></table></figure></p><h3 id="如果用JSONObject接收"><a href="#如果用JSONObject接收" class="headerlink" title="如果用JSONObject接收"></a>如果用JSONObject接收</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">JSONObject</span>&gt; data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  获取Map中数据,改为反射方式</span></span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; T getDataByKey(<span class="keyword">String</span> <span class="built_in">key</span>, Class&lt;T&gt; clazz) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">JSONObject</span> jsonObject = data.<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">JSONObject</span>.toJavaObject(jsonObject, clazz);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//    return (T) new  Object();</span></span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>报错:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E/<span class="string">onError:</span> <span class="string">onError:</span>syntax error, expect &#123;, actual <span class="keyword">int</span>, pos <span class="number">69</span>, line <span class="number">1</span>, column <span class="number">70</span>&#123;<span class="string">"code"</span>:<span class="number">200</span>,<span class="string">"ok"</span>:<span class="literal">true</span>,<span class="string">"msg"</span>:<span class="string">"未找到该许可证号"</span>,<span class="string">"data"</span>:&#123;<span class="string">"needLicensePicture"</span>:<span class="number">1</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="media/15480332032409.jpg" alt="-w941"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E/onError: onError:com<span class="selector-class">.alibaba</span><span class="selector-class">.fastjson</span><span class="selector-class">.JSONObject</span> cannot be cast to com<span class="selector-class">.ctitc</span><span class="selector-class">.deep</span><span class="selector-class">.bean</span><span class="selector-class">.base</span><span class="selector-class">.BaseUser</span></span><br></pre></td></tr></table></figure><h3 id="最后的解决方案"><a href="#最后的解决方案" class="headerlink" title="最后的解决方案"></a>最后的解决方案</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  获取Map中数据,改为反射方式</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T getDataByKey(String key, Class&lt;T&gt; clazz) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">data</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">            Object <span class="keyword">object</span> = <span class="keyword">data</span>.<span class="keyword">get</span>(key);</span><br><span class="line">            <span class="comment">//数组和对象，都会被fastjson自动转换为JSON对象</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">object</span> instanceof JSON) &#123;</span><br><span class="line">                <span class="keyword">return</span> JSONObject.toJavaObject((JSON) <span class="keyword">object</span>, clazz);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//普通类型，如Integer等，直接转</span></span><br><span class="line">                <span class="keyword">return</span> (T) <span class="keyword">object</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//    return (T) new  Object();</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Json-解析&quot;&gt;&lt;a href=&quot;#Json-解析&quot; class=&quot;headerlink&quot; title=&quot;Json 解析&quot;&gt;&lt;/a&gt;Json 解析&lt;/h1&gt;&lt;p&gt;JSONObject&lt;/p&gt;
&lt;h2 id=&quot;Integer解析报错问题&quot;&gt;&lt;a href=&quot;#In
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://seachal.me/uncategorized/2019/01/30/Android/%E5%8C%BA%E5%9F%9F%E3%80%81%E7%9C%81%E5%B8%82%E5%8E%BF%E3%80%81%E5%9C%B0%E5%8C%BA%E9%80%89%E6%8B%A9-2019-01-26/"/>
    <id>https://seachal.me/uncategorized/2019/01/30/Android/区域、省市县、地区选择-2019-01-26/</id>
    <published>2019-01-30T12:38:56.465Z</published>
    <updated>2019-01-30T12:38:56.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="区域、省市县、地区选择-2019-01-26"><a href="#区域、省市县、地区选择-2019-01-26" class="headerlink" title="区域、省市县、地区选择-2019-01-26"></a>区域、省市县、地区选择-2019-01-26</h1><p>关键字： PickerView </p><ol><li>select choice choose elect<br>option</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;区域、省市县、地区选择-2019-01-26&quot;&gt;&lt;a href=&quot;#区域、省市县、地区选择-2019-01-26&quot; class=&quot;headerlink&quot; title=&quot;区域、省市县、地区选择-2019-01-26&quot;&gt;&lt;/a&gt;区域、省市县、地区选择-2019-01-
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://seachal.me/uncategorized/2019/01/30/Android/adb%E5%91%BD%E4%BB%A42019-01-03/"/>
    <id>https://seachal.me/uncategorized/2019/01/30/Android/adb命令2019-01-03/</id>
    <published>2019-01-30T12:38:56.464Z</published>
    <updated>2019-01-30T12:38:56.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="adb-命令"><a href="#adb-命令" class="headerlink" title="adb 命令"></a>adb 命令</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb <span class="keyword">install</span> xxx.apk</span><br></pre></td></tr></table></figure><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb devices  </span><br><span class="line">adb <span class="keyword">shell</span><span class="bash"> pm list packages</span></span><br><span class="line"><span class="bash">adb uninstall com.xxx.xxx</span></span><br></pre></td></tr></table></figure><ol><li><p>打开命令行，输入adb devices，查看设备是否连接；</p></li><li><p>输入adb shell pm list packages，查看设备已有的程序列表，找到需要卸载的程序包名;</p><ul><li><p>如果有多个设备 </p>   <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb -s 设备<span class="built_in">id</span> shell   pm <span class="built_in">list</span> packages</span><br></pre></td></tr></table></figure></li></ul></li></ol><ol><li><p>输入adb uninstall com.xxx.xxx（需要卸载的程序包名）；  </p><ul><li><p>如果有多个设备 </p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">adb</span> <span class="selector-tag">-s</span> 192<span class="selector-class">.168</span><span class="selector-class">.56</span><span class="selector-class">.101</span><span class="selector-pseudo">:5555</span>（设备<span class="selector-tag">id</span>）  <span class="selector-tag">uninstall</span> <span class="selector-tag">com</span><span class="selector-class">.tencent</span><span class="selector-class">.qqpimsecure</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><p><img src="media/15470827806798.jpg" alt="-w554"></p><p>4.adb 启动应用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;adb-命令&quot;&gt;&lt;a href=&quot;#adb-命令&quot; class=&quot;headerlink&quot; title=&quot;adb 命令&quot;&gt;&lt;/a&gt;adb 命令&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://seachal.me/uncategorized/2019/01/30/Android/RxJava1%E5%92%8CRxJava2%E7%9A%84%E5%8F%98%E5%8C%96-2019-01-25/"/>
    <id>https://seachal.me/uncategorized/2019/01/30/Android/RxJava1和RxJava2的变化-2019-01-25/</id>
    <published>2019-01-30T12:38:56.463Z</published>
    <updated>2019-01-30T12:38:56.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RxJava1和RxJava2的变化-2019-01-25"><a href="#RxJava1和RxJava2的变化-2019-01-25" class="headerlink" title="RxJava1和RxJava2的变化-2019-01-25"></a>RxJava1和RxJava2的变化-2019-01-25</h1><p>2.x 将 1.x 中的 Func1 和 Func2 改为了 Function 和 BiFunction。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RxJava1和RxJava2的变化-2019-01-25&quot;&gt;&lt;a href=&quot;#RxJava1和RxJava2的变化-2019-01-25&quot; class=&quot;headerlink&quot; title=&quot;RxJava1和RxJava2的变化-2019-01-25&quot;&gt;&lt;/a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://seachal.me/uncategorized/2019/01/30/Android/RxJava%E7%9A%84%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%92%8CRetrofit%E5%AE%9E%E7%8E%B0token%E8%BF%87%E6%9C%9F%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0(%E6%9B%B4%E6%96%B0)2019-01-25/"/>
    <id>https://seachal.me/uncategorized/2019/01/30/Android/RxJava的操作符和Retrofit实现token过期自动刷新(更新)2019-01-25/</id>
    <published>2019-01-30T12:38:56.463Z</published>
    <updated>2019-01-30T12:38:56.464Z</updated>
    
    <content type="html"><![CDATA[<p># </p><p>range<br>range操作符根据出入的初始值n和数目m发射一系列大于等于n的m个值.<br>range(n,m)<br>n,n+1，n+m-1<br>举个例子：<br>rang(2,2),发射的是 2，3</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;# &lt;/p&gt;
&lt;p&gt;range&lt;br&gt;range操作符根据出入的初始值n和数目m发射一系列大于等于n的m个值.&lt;br&gt;range(n,m)&lt;br&gt;n,n+1，n+m-1&lt;br&gt;举个例子：&lt;br&gt;rang(2,2),发射的是 2，3&lt;/p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://seachal.me/uncategorized/2019/01/30/Android/Retrofit%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86-2019-01-25/"/>
    <id>https://seachal.me/uncategorized/2019/01/30/Android/Retrofit统一异常错误处理-2019-01-25/</id>
    <published>2019-01-30T12:38:56.461Z</published>
    <updated>2019-01-30T12:38:56.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Retrofit统一异常错误处理-2019-01-25-md"><a href="#Retrofit统一异常错误处理-2019-01-25-md" class="headerlink" title="Retrofit统一异常错误处理-2019-01-25.md"></a>Retrofit统一异常错误处理-2019-01-25.md</h1><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p> 如果服务器返回Code</p><h2 id="未来终端"><a href="#未来终端" class="headerlink" title="未来终端"></a>未来终端</h2><p><strong>未来终端中</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> ok;<span class="comment">//</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; data;</span><br></pre></td></tr></table></figure></p><p>ok只能判断业务是否成功， 当然网络不成功 ok肯定不是true,例如401。<br>但是 ok是false的时候，网络不一定不成功，例如密码错误。</p><p>200是网络请求ok，但是业务可能不成功，服务器此时会有一些提示信息，比如“密码不正确”、“没有权限”等等。这些会在 RxJava的onNext中处理，<strong>要不要把rsult!=null&amp;&amp;result.ok==false的情况的拦截到 onError中处理？</strong>。</p><h2 id="RxEasyHttp-分析"><a href="#RxEasyHttp-分析" class="headerlink" title="RxEasyHttp 分析"></a>RxEasyHttp 分析</h2><p>搜索<code>onErrorResumeNext</code> 得到</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HandleErrTransformer. <span class="keyword">Java </span><span class="number">36</span></span><br><span class="line">RxUtil. <span class="keyword">Java </span><span class="number">88</span> RxUtil. <span class="keyword">Java </span><span class="number">113</span> </span><br><span class="line"><span class="keyword">BaseStrategy. </span><span class="keyword">Java </span><span class="number">53</span> </span><br><span class="line"><span class="keyword">BaseStrategy. </span><span class="keyword">Java </span><span class="number">91</span> </span><br><span class="line"><span class="keyword">BaseStrategy. </span><span class="keyword">Java </span><span class="number">124</span></span><br><span class="line">PollActivity. <span class="keyword">Java </span><span class="number">61</span></span><br></pre></td></tr></table></figure><p>搜索<code>retryWhen</code>得到</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PutRequest. Java <span class="number">68</span> </span><br><span class="line">PutRequest. Java <span class="number">103</span> </span><br><span class="line">DeleteRequest. Java <span class="number">74</span></span><br><span class="line">GetRequest. Java <span class="number">68</span></span><br><span class="line">GetRequest. Java <span class="number">101</span> </span><br><span class="line">PostRequest. Java <span class="number">68</span> </span><br><span class="line">PostRequest. Java <span class="number">101</span></span><br><span class="line">CustomRequest. Java <span class="number">81</span></span><br><span class="line">CustomRequest. Java <span class="number">104</span></span><br><span class="line">CustomRequest. Java <span class="number">132</span> </span><br><span class="line">DownloadRequest. Java <span class="number">78</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Retrofit统一异常错误处理-2019-01-25-md&quot;&gt;&lt;a href=&quot;#Retrofit统一异常错误处理-2019-01-25-md&quot; class=&quot;headerlink&quot; title=&quot;Retrofit统一异常错误处理-2019-01-25.md&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://seachal.me/uncategorized/2019/01/15/Programmer/HTTP%20%E5%93%8D%E5%BA%94%E4%BB%A3%E7%A0%81-2019-01-14/"/>
    <id>https://seachal.me/uncategorized/2019/01/15/Programmer/HTTP 响应代码-2019-01-14/</id>
    <published>2019-01-15T13:48:03.459Z</published>
    <updated>2019-01-15T13:48:03.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP-响应代码"><a href="#HTTP-响应代码" class="headerlink" title="HTTP 响应代码"></a>HTTP 响应代码</h1><h2 id="400"><a href="#400" class="headerlink" title="400"></a>400</h2><p>400 是 HTTP 的状态码，主要有两种形式：</p><p>1、bad request 意思是 “错误的请求”；<br>2、invalid hostname 意思是 “不存在的域名”。<br>400 Bad Request 是由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求。</p><p>解决方案：</p><p>1、对照字段名称，类型保证一致性</p><p>2、检查域名</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTTP-响应代码&quot;&gt;&lt;a href=&quot;#HTTP-响应代码&quot; class=&quot;headerlink&quot; title=&quot;HTTP 响应代码&quot;&gt;&lt;/a&gt;HTTP 响应代码&lt;/h1&gt;&lt;h2 id=&quot;400&quot;&gt;&lt;a href=&quot;#400&quot; class=&quot;headerlink
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://seachal.me/uncategorized/2019/01/15/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8Vagrant%E7%9A%84%E8%99%9A%E6%8B%9F%E7%9B%92vboxheadless%E8%BF%9B%E7%A8%8B%E4%BD%BF%E7%94%A8100%EF%BC%85%E7%9A%84cpu-2019-01-02/"/>
    <id>https://seachal.me/uncategorized/2019/01/15/为什么使用Vagrant的虚拟盒vboxheadless进程使用100％的cpu-2019-01-02/</id>
    <published>2019-01-15T13:47:52.983Z</published>
    <updated>2019-01-15T13:47:52.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么使用Vagrant的虚拟盒vboxheadless进程使用100％的cpu？"><a href="#为什么使用Vagrant的虚拟盒vboxheadless进程使用100％的cpu？" class="headerlink" title="为什么使用Vagrant的虚拟盒vboxheadless进程使用100％的cpu？"></a>为什么使用Vagrant的虚拟盒vboxheadless进程使用100％的cpu？</h1><p><a href="https://stackoverflow.com/questions/28293238/why-does-virtual-box-vboxheadless-process-using-vagrant-use-100-of-my-cpu" target="_blank" rel="noopener">https://stackoverflow.com/questions/28293238/why-does-virtual-box-vboxheadless-process-using-vagrant-use-100-of-my-cpu</a></p><p><a href="https://www.vagrantup.com/downloads.html" target="_blank" rel="noopener">https://www.vagrantup.com/downloads.html</a></p><p> 1.下载 vagrant，安装，<br> 2.在命令行中执行，<code>vagrant plugin install vagrant-vbguest</code></p><h2 id="有效的方法"><a href="#有效的方法" class="headerlink" title="有效的方法"></a>有效的方法</h2><p>系统-&gt;处理器-&gt;勾选“启用PAE / NX”框<br>我发现只需勾选“启用PAE / NX”框就会将空闲CPU使用率降低到可接受的9％。<br>关键字： virtualbox genymotion mac cpu VBoxHeadless<br><a href="https://tickett.wordpress.com/2014/11/19/virtualbox-high-cpu-usage-on-osx/" target="_blank" rel="noopener">https://tickett.wordpress.com/2014/11/19/virtualbox-high-cpu-usage-on-osx/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;为什么使用Vagrant的虚拟盒vboxheadless进程使用100％的cpu？&quot;&gt;&lt;a href=&quot;#为什么使用Vagrant的虚拟盒vboxheadless进程使用100％的cpu？&quot; class=&quot;headerlink&quot; title=&quot;为什么使用Vagra
      
    
    </summary>
    
    
  </entry>
  
</feed>
